{
  "test": [
    {
      "name": "epcCdtrSchemeIdUnusedFull",
      "text": "The requirement is as follows:\n\nThe application checks that within a single 'Payment Information' block, all transactions should have the same 'Creditor Scheme Identification'. All fields have to be equal except for postal addresses and DateAndPlaceOfBirth. This primarily includes fields like the name, Organisation Identification details, including BIC, IBEI, BEI, EANGLN, USCHU, DUNS, bank party ID, tax ID number, Proprietary ID with its issuer, and individual Identification details like driver's license number, customer number, social security number, alien registration number, passport number, tax ID number, identity card number, employer ID number, other ID with its type, issuer, and country of residence. \n\nThis condition is enforced on every pair of Direct Debit transactions in the Payment Instruction Information context. The rule does not apply to the Nm, postal address, and OrgId fields for the AOS community, and these fields along with all prvtId fields (excluding othrId) are excluded in PACS3. This requirement is referenced from page 11, row 14 of the SEPA C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* It is recommended that all transactions within the same 'Payment Information' block have the same \n   'Creditor Scheme Identification'. Note: This rule checks all fields except postal addresses and \n   DateAndPlaceOfBirth are the same. However, most checks are not needed because (a) the Nm, postal \n   address and OrgId fields are excluded except for the AOS community, and (b) these fields as well \n   as all prvtId fields other than othrId are excluded in pacs3.\n   Ref pg 11, row 14, SEPA C2B Implementation Guidelines. */\n\ncontext PaymentInstructionInformation2\ninv EPC_cdtrSchmeId_UNUSED_FULL:\ndrctDbtTxInf.drctDbtTx.cdtrSchmeId->forAll(a, b | \n  let aOrgId: OrganisationIdentification2 = a.id.orgId in\n  let bOrgId: OrganisationIdentification2 = b.id.orgId in\n  let aPrvtId: OrderedSet(PersonIdentification3) = a.id.prvtId in\n  let bPrvtId: OrderedSet(PersonIdentification3) = b.id.prvtId in\n    a.nm = b.nm and\n    aOrgId.bIC= bOrgId.bIC and\n    aOrgId.iBEI= bOrgId.iBEI and\n    aOrgId.bEI= bOrgId.bEI and\n    aOrgId.eANGLN= bOrgId.eANGLN and\n    aOrgId.uSCHU= bOrgId.uSCHU and\n    aOrgId.dUNS = bOrgId.dUNS and\n    aOrgId.bkPtyId = bOrgId.bkPtyId and\n    aOrgId.taxIdNb = bOrgId.taxIdNb and\n    aOrgId.prtryId.id = bOrgId.prtryId.id and\n    aOrgId.prtryId.issr = bOrgId.prtryId.issr and\n    aPrvtId.drvrsLicNb = bPrvtId.drvrsLicNb and\n    aPrvtId.cstmrNb= bPrvtId.cstmrNb and\n    aPrvtId.sclSctyNb = bPrvtId.sclSctyNb and\n    aPrvtId.alnRegnNb= bPrvtId.alnRegnNb and\n    aPrvtId.psptNb = bPrvtId.psptNb and\n    aPrvtId.taxIdNb = bPrvtId.taxIdNb and\n    aPrvtId.idntyCardNb = bPrvtId.idntyCardNb and\n    aPrvtId.mplyrIdNb = bPrvtId.mplyrIdNb and\n    aPrvtId.othrId.id = bPrvtId.othrId.id and\n    aPrvtId.othrId.idTp = bPrvtId.othrId.idTp and\n    aPrvtId.issr = bPrvtId.issr and\n    a.ctryOfRes = b.ctryOfRes)\n\nendpackage"
    },
    {
      "name": "epcDrctDbtTxInfdbtrIdprvtId",
      "text": "The requirements are as follows: For the Direct Debit Transaction Information-Debtor (represented by the class DirectDebitTransactionInformation1) in the package isoStdIso20022TechXsdPain00800101 based on the model pain.008.001.01corrected.xsd, the debtor's Private Identification (represented by dbtr.id.prvtId) should appear no more than once. This implies that the debtor's private identification may not exist (i.e., it can be undefined), or if it does exist, there should only be no more than one instance of it. This rule aligns with the row 12 on page 13 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Only one occurrence of Private Identification for Direct Debit Transaction Information Debtor \n   (DrctDbTxInf dbtr Id prvtId) may be present.\n   Ref row 12 on pg 13 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_drctDbtTxInfdbtrIdprvtId:\ndbtr.id.oclIsUndefined()\nor\ndbtr.id.prvtId->size() <=1\n\nendpackage"
    },
    {
      "name": "epcDbtrNm",
      "text": "The requirement is as follows: \n\nThe Debtor's Name (directDebitTransactionInformation Dbtr Nm) within the DirectDebitTransactionInformation1 context of the package isoStdIso20022TechXsdPain00800101, according to the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3, must be provided. This implies that the size of the debtor's name has to be greater than zero, meaning that it must not be an empty field.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Debtor Name (drctDbtTxInf Dbdtr Nm) is mandatory. \n   See row 17 on pg 12 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_dbtrNm:\ndbtr.nm->size() > 0\n\nendpackage"
    },
    {
      "name": "Papers-ResearchersSAT.uml",
      "text": "The requirements are as follows:\n\n1. In the context of a Paper entity, the author of every paper designated as a \"studentPaper\" must be a student. This means that there should be at least one author who is a student for every paper marked as a student paper.\n\n2. There should be at least one paper marked as a \"studentPaper\" in the system. However, the total number of papers marked as \"studentPaper\" should be less than five.\n\n3. The word count for any paper within the system must be less than 10,000 words.\n\n4. In the context of a Paper entity, none of the referees reviewing any paper should be a student. This means that not a single reviewer assigned to a paper should be a student.",
      "label": "package model\n\ncontext Paper \ninv AuthorsOfStudentPaper: Paper::allInstances()->forAll(p|p.studentPaper = p.author->exists(x|x.isStudent))\n\ncontext Paper inv LimitsOnStudentPapers: \nPaper::allInstances()->exists(p|p.studentPaper) and Paper::allInstances()->select(p|p.studentPaper)->size() < 5\n\ncontext Paper\ninv PaperLength: Paper::allInstances()->forAll(p|p.wordCount < 10000)\n\n--context Researcher\n--inv NoSelfReviews: Researcher::allInstances()->forAll(r|r.submission->excludes(r.manuscript))\n\ncontext Paper \ninv NoStudentReviewers: Paper::allInstances()->forAll(p| p.referee->forAll(r| not r.isStudent))\n\n\nendpackage"
    },
    {
      "name": "Basic-UnSat-OCL-2",
      "text": "The requirements are as follows:\n\nIn the context of 'A2', for every instance 'a' of 'A2', the attribute 'at' of instance 'a' must be greater than the attribute 'at' of associated instance 'a1'.\n\nIn the context of 'A1', for every instance 'a' of 'A1', the attribute 'at' of instance 'a' must be equal to or greater than the attribute 'at' of associated instance 'a2'.",
      "label": "package Package_1\ncontext A2 inv: A2::allInstances()->forAll(a|a.at>a.a1.at)\nendpackage\npackage Package_1\ncontext A1 inv: A1::allInstances()->forAll(a|a.at>=a.a2.at)\nendpackage"
    },
    {
      "name": "epcAosMdntRltInfAmfmntInfDtls",
      "text": "The requirements are as follows:\n\nIn the context of AmendmentInformationDetails1, no elements of Original Creditor Scheme Identification Postal Address, Original Creditor Scheme Identification Organization ID, Original Creditor Scheme Identification Country of Residence, Original Creditor Agent, Original Creditor Agent Account, Original Debtor, Original Debtor Agent Account, Original Final Collection Date and Original Frequency specified in the Mandate Related Information Amendment Information Details should be present or have a size of 0. This rule applies to all instances of AmendmentInformationDetails1. Exceptions are only for Instructed banks that are part of the AOS community. Non-AOS community banks might reject messages containing these elements. Please refer to section 1.2 of the SEPA B2B Direct Debit C2B Implementation Guidelines for more information.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The elements OrgnlCdtrSchmeId PstlAdr, OrgnlCdtrSchmeId Id OrgId, OrgnlCdtrSchmeId CtryOfRes, \n   OrgnlCdtrAgt, OrgnlCdtrAgtAcct, OrgnlDbtr, OrgnlDbtrAgtAcct, OrgnlFnlColltnDt and OrgnlFrqcy in MndtRltInf\n   AmdmntInfDtls are AOS only. Instructed banks that are not in the AOS community may reject messages \n   containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext AmendmentInformationDetails1 \ninv EPC_AOS_MndtRltInfAmdmntInfDtls:\norgnlCdtrSchmeId.pstlAdr->size() = 0 and \norgnlCdtrSchmeId.id.orgId->size() = 0 and \norgnlCdtrSchmeId.ctryOfRes->size() = 0 and \norgnlCdtrAgt->size() = 0 and \norgnlCdtrAgtAcct->size() = 0 and \norgnlDbtr->size() = 0 and \norgnlDbtrAgtAcct->size() = 0 and \norgnlFnlColltnDt->size() = 0 and\norgnlFrqcy->size() = 0\n\nendpackage"
    },
    {
      "name": "epcAosCdtrAcct",
      "text": "The requirements are as follow:\n\nIn the context of the PaymentInstructionInformation2 of isoStdIso20022TechXsdPain00800101 package, the size of both 'tp' and 'nm' elements in 'cdtrAcct' must be zero. This requirement is under the restriction that these elements are only for the AOS community. Therefore, banks that are not in the AOS community might reject messages containing these elements, as per section 1.2 of the SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The elements Tp and Nm in PmtInf CdtrAcct are AOS only. Instructed banks that are\n   not in the AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext PaymentInstructionInformation2\ninv EPC_AOS_CdtrAcct:\ncdtrAcct.tp->size() = 0 \nand\ncdtrAcct.nm->size() = 0\n\nendpackage"
    },
    {
      "name": "epcAosPmtTpInf",
      "text": "The requirements are as follows:\n\nIn this given system, there is a restriction over the PaymentTypeInformation2. The attributes \"instrPrty\", \"svcLvl.prtry\", \"clrChanl\", and \"lclInstrm.prtry\" should not contain any elements. Additionally, it is to be noted that the elements \"InstrPrty\", \"SvcLvl Prtry\", \"ClrChanl\" and \"LclInstrm Prtry\" in \"PmtTpInf\" are only applicable to AOS (Automated Order System). Non-AOS affiliated banks may reject messages containing these elements. This information is mentioned in section 1.2 of the SEPA B2B Direct Debit C2B Implementation Guidelines. The system must ensure to validate these conditions to conform with the stated rules.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The elements InstrPrty, SvcLvl Prtry, ClrChanl and LclInstrm Prtry in PmtTpInf are AOS only.\n   Instructed banks that are not in the AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext PaymentTypeInformation2\ninv EPC_AOS_PmtTpInf:\ninstrPrty->size() = 0 and\nsvcLvl.prtry->size() = 0 and \nclrChanl->size() = 0 and \nlclInstrm.prtry->size() = 0\n\nendpackage"
    },
    {
      "name": "epcCdtrSchemeIdPrvtIdSepa",
      "text": "The requirements are as follows:\n\nIn the context of DirectDebitTransaction1 package from isoStdIso20022TechXsdPain00800101 model, the 'Identification Type' (denoted as IdTp) under 'Other Identification' (othrId), for Credit Scheme Identification Private Ids (cdtrSchmeId Id prvtId) ought to specify 'SEPA'. This is detailed in row 3 of page 12 of the SEPA (Single Euro Payments Area) B2B (Business-to-Business) Direct Debit C2B (Customer-to-Bank) Implementation Guidelines.\n\nIn case the credit scheme identification is undefined or not provided (cdtrSchmeId.oclIsUndefined()), then any private identification (prvtId) provided should have their other identification type (othrId.idTp) specified as 'SEPA'.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* 'Identification Type'  under 'Other Identification' for Credit Scheme Identification Private Ids \n   (cdtrSchmeId Id prvtId othrId IdTp) must specify 'SEPA'.\n   See row 3 of page 12 SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransaction1\ninv EPC_cdtrSchmeId_prvtId_SEPA:\ncdtrSchmeId.oclIsUndefined()\nor\ncdtrSchmeId.id.prvtId->forAll(a | a.othrId.idTp='SEPA')\n\nendpackage"
    },
    {
      "name": "epcPmtTpInf",
      "text": "The requirement is as follows: In the package of isoStdIso20022TechXsdPain00800101, under the context of PaymentInstructionInformation2, the Payment Type Information (field: PmtInf PmtTpInf) is mandatory as per the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3 document. This means that the size of pmtTpInf, indicating the number of entries in it, should always be greater than 0, ensuring that at least one Payment Type Information entry exists.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Payment Type Information (PmtInf PmtTpInf) is mandatory. \n   Ref row 4 Section 2.1.3 in SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3 document. */\n\ncontext PaymentInstructionInformation2\ninv EPC_PmtTpInf:\npmtTpInf->size() > 0\n\nendpackage"
    },
    {
      "name": "ExampleThesis",
      "text": "The requirements are as follows:\n\n1. For any product, the product has to have a price that is above zero and maximum discount that is no more than 60%.\n\n2. For any sale, each shipment within the sale should have its planned shipping date to be no more than 30 days after the payment date.\n\n3. For any category, all customers in this category must have the total pending sale amount not exceeding the maximum pending amount set for the category. In addition, each category must have at least three customers.\n\n4. The number of restricted products should be no more than 20.\n\nIn the second set of requirements, the conditions are negated as follows:\n\n1. There can exist products having price less or equal than zero or maximum discount more than 60%.\n\n2. There can exist instances of sales where at least one shipment has a planned shipping date more than 30 days after the payment date.\n\n3. There can exist categories where there is at least one customer has the total pending sale amount exceeding the maximum pending amount set for the category. There can also be categories with less than three customers.\n\n4. The number of restricted products can be more than 20.",
      "label": "package company\ncontext Product inv CorrectProduct:  self.price>0 and self.maxDiscount<=60 \n--context Product inv CorrectProduct2:  not Product::allInstances()->exists( price<=0  or  maxDiscount>60) \n--context Product inv CorrectProduct2:  not Product::allInstances()->exists(p| not(p.price>0  and  p.maxDiscount<=60)) \n--context Product inv CorrectProduct3:  Product::allInstances()->forAll(p| not (p.price<=0  or p.maxDiscount>60)) \n--context Product inv CorrectProduct4: not (self.price<=0  or self.maxDiscount>60) \nendpackage\npackage company\n context Sale inv ValidShipDate: self.shipment->forAll(sh| sh.plannedShipDate<=self.paymentDate+30) \nendpackage\npackage company\ncontext Category inv NotTooPendingSales: self.customer->forAll(c| c.sale->select(s|s.paymentDate>Time::now())->collect(sa|sa.amount)->sum()<=self.maxPendingAmount) \n--context Category inv NotTooPendingSales: self.customer->forAll(c| not (c.sale->select(s|s.paymentDate>Time::now())->collect(sa|sa.amount)->sum()>self.maxPendingAmount)) \ncontext Category inv AtLeastThreeCustomers: self.customer->size()>=3\nendpackage\npackage company\ncontext RestrictedProduct inv NumberOfRestrictedProducts: RestrictedProduct::allInstances()->size()<=20\nendpackage\n\n\n-- Simplification tests\npackage company\n--context Shipment inv ValidShipDate2: self.sale->notEmpty() implies\n--self.sale->forAll(s| s.shipment->forAll(sh| sh.plannedShipDate<=s.paymentDate+30))\n--context Shipment inv Valid3: self.sale.shipment->forAll(sh| sh.sale->forAll(s| sh.plannedShipDate<=s.paymentDate+30))\nendpackage\n\npackage company\n--context Customer inv NotTooPendingSales2: self.category->notEmpty() implies self.category->forAll(cat| cat.customer->forAll(c| c.sale->select(s|s.paymentDate>Time::now())->collect(sa|sa.amount)->sum()<=cat.maxPendingAmount))\n--context Customer inv NotToo3: self.category.customer->forAll(c| c.sale->select(s|paymentDate>Time::now())->collect(sa|sa.amount)-> sum()<=self.category.maxPendingAmount)\n--context Customer inv NotToo4: self.sale->select(s|paymentDate>Time::now())->collect(sa|amount)-> sum()<=self.category.maxPendingAmount\nendpackage\n\n-- Examples with the not operator\npackage company\ncontext Product inv CorrectProduct: not( self.price>0 and self.maxDiscount<=60 )\nendpackage\npackage company\n context Sale inv ValidShipDate: not (self.shipment->forAll(sh| sh.plannedShipDate<=self.paymentDate+30) )\nendpackage\npackage company\ncontext Category inv NotTooPendingSales: not( self.customer->forAll(c| c.sale->select(s|s.paymentDate>Time::now())->collect(sa|sa.amount)->sum()<=self.maxPendingAmount) )\ncontext Category inv AtLeastThreeCustomers: not (self.customer->size()>=3)\nendpackage\npackage company\ncontext RestrictedProduct inv NumberOfRestrictedProducts: not (RestrictedProduct::allInstances()->size()<=20)\nendpackage"
    },
    {
      "name": "epcMndtRltdInfOrgnlCdtrSchemIdPrvitIdSEPA",
      "text": "The requirements are as follows:\n\nFor the DirectDebitTransaction1 object, there should be only one occurrence of 'Private Identification' allowed for the 'Mandate Related Information Amendment Information Original Creditor Schemes', which is referred as the 'mndtRltdInf AmdmntInfDtl orgnlCdtrSchmeId Id prvtId' path in the code.\n\nThe presence of 'mndtRltdInf', 'amdmntInfDtls', and 'orgnlCdtrSchmeId.id.prvtId' should either be undefined or their occurrence should not exceed one. This rule is also in line with the SEPA B2B Direct Debit C2B Implementation Guidelines as mentioned on page 10, row 13.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Only one occurrence of 'Private Identification' is allowed for Mandate Related Information Amendment\n   Information Original Creditor Schemes (DrctDbTx mndtRltdInf AmdmntInfDtl orgnlCdtrSchmeId Id prvtId).\n   See row 13 of page 10 SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransaction1\ninv EPC_mndtRltdInf_orgnlCdtrSchmeId_prvtIdOnlyOne:\nself.mndtRltdInf.oclIsUndefined()\nor\nself.mndtRltdInf.amdmntInfDtls.oclIsUndefined()\nor\nself.mndtRltdInf.amdmntInfDtls.orgnlCdtrSchmeId.id.prvtId->size() <=1\n\nendpackage"
    },
    {
      "name": "epcAosDrctDbtTxInfDbtr",
      "text": "The requirements are as follows:\n\nIn the context of the DirectDebitTransactionInformation1, which refers to the information regarding a direct debit transaction,\ncertain elements pertaining to the debtor’s postal address (PstlAdr), such as address type (AdrTp), street name (StrtNm), building number (BldgNb), postal code (PstCd), town name (TwnNm), country subdivision (CtrySubDvsn), and country of residence (CtryOfRes)should not be present. This is due to the fact that these elements are only applicable to the AOS community. Banks not part of the AOS community may reject messages containing these elements. As such, the sizes of these elements should all be 0, indicating their absence.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The elements PstlAdr AdrTp, PstlAdr StrtNm, PstlAdr BldgNb, PstlAdr PstCd, PstlAdr TwnNm,\n   PstlAdr CtrySubDvsn and CtryOfRes in DrctDbtTxInf Dbtr are AOS only. Instructed banks that are not \n   in the AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_AOS_DrctDbtTxInfDbtr:\ndbtr.pstlAdr.adrTp->size() = 0 \nand \ndbtr.pstlAdr.strtNm->size() = 0\nand \ndbtr.pstlAdr.bldgNb->size() = 0\nand \ndbtr.pstlAdr.pstCd->size() = 0 \nand \ndbtr.pstlAdr.twnNm->size() = 0 \nand \ndbtr.pstlAdr.ctrySubDvsn->size() = 0 \nand\ndbtr.ctryOfRes->size() = 0\n\nendpackage"
    },
    {
      "name": "epcDrctDbtTxInfdbtrIdOrgId",
      "text": "The requirement is as follows:\n\nIn the context of Direct Debit Transaction Information model, a rule stipulates that the Debtor Identification (represented as 'dbtr.id.orgId') should only contain one of the following nine sub-elements: BIC, IBEI, BEI, EANGLN, USCHU, DUNS, BkPryId, TaxIdNb, or prtryId. This is dictated as such that the size of the combined sub-elements cannot be greater than one when the original parent element 'dbtr.id.orgId' size equals one. This requirement is in line with the rules set in the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3, particularly referring to the instructions found on row 11 on page 13.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* The Direct Debit Transaction Information Debtor Identification (drctDbtTxInf dbtr Id OrgId) can only \n   contain one of the subelements BIC, IBEI, BEI, EANGLN, USCHU, DUNS, BkPryId, TaxIdNb, or prtryId.\n   See row 11 on pg 13 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_drctDbtTxInfdbtrIdOrgId:\ndbtr.id.orgId->size() = 1 implies \n (dbtr.id.orgId.bIC->size() +\n  dbtr.id.orgId.iBEI->size() +\n  dbtr.id.orgId.bEI->size() +\n  dbtr.id.orgId.eANGLN->size() +\n  dbtr.id.orgId.uSCHU->size() +\n  dbtr.id.orgId.dUNS->size() +\n  dbtr.id.orgId.bkPtyId->size() +\n  dbtr.id.orgId.taxIdNb->size() +\n  dbtr.id.orgId.prtryId->size()) <= 1\n\nendpackage"
    },
    {
      "name": "epcDrctDbtTxInfUltmdbrIdorgId",
      "text": "The requirements are as follows:\n\nWithin the 'Direct Debit Transaction Information Ultimate Debtor Identification' (referred to as 'drctDbtTxInf Ultmt dbtr Id orgId') for the ISO 20022 pain.008.001.01 specification, it is presumed that the 'orgId' attribute will only contain one of the following sub-elements: BIC, IBEI, BEI, EANGLN, USCHU, DUNS, BkPtyId, TaxIdNb, or prtryId.\n\nIn other words, though the 'orgId' attribute might contain multiple values, the sum of the values across these sub-elements should not exceed one. If the 'orgId' attribute contains only one entry, it must be one of the sub-elements listed above.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* The Direct Debit Transaction Information Ultimate Debtor Identification (drctDbtTxInf Ultmt dbtr Id orgId)\n   can only contain one of the subelements BIC, IBEI, BEI, EANGLN, USCHU, DUNS, BkPryId, TaxIdNb, or prtryId.\n   See row 19 on pg 13 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_drctDbtTxInfUltmdbtrIdorgId:\nultmtDbtr.id.orgId->size() = 1 implies \n (ultmtDbtr.id.orgId.bIC->size() +\n  ultmtDbtr.id.orgId.iBEI->size() +\n  ultmtDbtr.id.orgId.bEI->size() +\n  ultmtDbtr.id.orgId.eANGLN->size() +\n  ultmtDbtr.id.orgId.uSCHU->size() +\n  ultmtDbtr.id.orgId.dUNS->size() +\n  ultmtDbtr.id.orgId.bkPtyId->size() +\n  ultmtDbtr.id.orgId.taxIdNb->size() +\n  ultmtDbtr.id.orgId.prtryId->size()) <= 1\n\nendpackage"
    },
    {
      "name": "epcDrctDbTxInfchrgBr",
      "text": "The requirement is as follows: In the package isoStdIso20022TechXsdPain00800101 that pertains to certain transaction information in the SEPA B2B Direct Debit C2B Implementation Guidelines document, the attribute 'Charge Bearer' (DrctDbTxInf chrgBr) in a Direct Debit Transaction Information (DirectDebitTransactionInformation1) context can only be set to 'SLEV'. This requirement is specifically detailed in the last row of page 9 of the above mentioned guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Charge Bearer in direct debit transaction information (DrctDbTxInf chrgBr) can only be set to SLEV.  \n   See last row, pg 9 of SEPA B2B Direct Debit C2B Implementation Guidelines document. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_DrctDbTxInfchrgBr:\nchrgBr = 'SLEV'\n\nendpackage"
    },
    {
      "name": "Basic-Sat-OCL-5",
      "text": "The requirements are as follows:\n\n1. For any instances of A2 in Package_1, the value of attribute 'at' should always be greater than or equal to the 'at' value of the corresponding A1 instance.\n\n2. For any instances of A3 in Package_1, the value of attribute 'at' should always be greater than or equal to the 'at' value of the corresponding A2 instance.\n\n3. For any instances of A4 in Package_1, the value of attribute 'at' should always be greater than or equal to the 'at' value of the corresponding A3 instance.\n\n4. For any instances of A5 in Package_1, the value of attribute 'at' should always be greater than or equal to the 'at' value of the corresponding A4 instance.\n\n5. For any instances of A1 in Package_1, the value of attribute 'at' should always be greater than or equal to the 'at' value of the corresponding A5 instance.",
      "label": "package Package_1\ncontext A2 inv: A2::allInstances()->forAll(a|a.at>=a.a1.at)\nendpackage\npackage Package_1\ncontext A3 inv: A3::allInstances()->forAll(a|a.at>=a.a2.at)\nendpackage\npackage Package_1\ncontext A4 inv: A4::allInstances()->forAll(a|a.at>=a.a3.at)\nendpackage\npackage Package_1\ncontext A5 inv: A5::allInstances()->forAll(a|a.at>=a.a4.at)\nendpackage\npackage Package_1\ncontext A1 inv: A1::allInstances()->forAll(a|a.at>=a.a5.at)\nendpackage"
    },
    {
      "name": "oclDBLP",
      "text": "The requirements are as follows:\n\n1. Every person should have a unique name.\n2. Every book should have a unique ISBN.\n3. Every book series should have a unique ID.\n4. Each issue of a book series is identified uniquely by its number.\n5. Every journal should have a unique ISSN.\n6. Every journal should have a unique title.\n7. Each volume of a journal is identified uniquely by its volume number.\n8. Each issue of a journal volume is identified uniquely by its number.\n9. Each section of a journal is identified uniquely by its title.\n10. Every conference series should have a unique name.\n11. Every conference edition should have a unique title.\n12. For book chapters, the initial page should be lesser or equal to the end page.\n13. For journal papers, the initial page should be lesser or equal to the end page.\n14. For journal issues, every paper should start on a different page.\n15. For edited books, every chapter should start on a different page.\n16. For book series issues, every chapter should start on a different page.\n17. All journal volumes within a journal should be consecutively numbered.\n18. If a book was presented at a conference, it should be published not earlier than the conference year.\n19. An edited book should not contain repetitions of the same section title.\n20. A book series issue should not have repetitions of the same section title.\n21. A journal section should not have repetitions of the same paper title.\n22. A book section should not have repetitions of the same chapter title.\n23. Every conference edition must end up being published in at least one of the following: an edited book, a book series issue, or a journal issue.\n24. Calculation of a person's total number of publications.\n25. Calculation of the total number of pages in a journal issue.\n26. The publication year of edited books, authored books, book chapters, and journal papers.\n27. The edition of edited books, authored books, book chapters, and journal papers.\n28. The publications associated with a specific author.\n29. The journal sections associated with a specific journal issue.\n30. The book sections associated with a specific edited book or book series issue.",
      "label": "package DBLP\n  context Person inv nameIsKey:\n   Person::allInstances() -> isUnique(name)\nendpackage\n\npackage DBLP\n  context Book inv isbnIsKey:\n   Book::allInstances() -> isUnique(isbn)\nendpackage\n\npackage DBLP\n  context BookSeries inv idIsKey:\n    BookSeries::allInstances() -> isUnique(id)\nendpackage\n\npackage DBLP\n  context BookSeries inv idAndNumberIdentifyBookSeriesIssue:\n    self.bookSeriesIssue -> isUnique(number)\nendpackage\n\npackage DBLP\n  context Journal inv issnIsKey:\n    Journal::allInstances() -> isUnique(issn)\nendpackage\n\npackage DBLP\n  context Journal inv titleIsKey:\n    Journal::allInstances() -> isUnique(title)\nendpackage\n\npackage DBLP\n  context Journal inv journalAndVolumeIdentifyJournalVolume:\n    self.journalVolume -> isUnique(volume)\nendpackage\n\npackage DBLP\n  context JournalVolume inv journalVolumeAndNumberIdentifyJournalIssue:\n    self.journalIssue -> isUnique(number)\nendpackage\n\npackage DBLP\n  context JournalIssue inv journalAndTitleIdentifyJournalSection:\n    self.journalSection -> isUnique(title)\nendpackage\n\npackage DBLP\n  context ConferenceSeries inv nameIsKey:\n    ConferenceSeries::allInstances() -> isUnique(name)\nendpackage\n\npackage DBLP\n  context ConferenceEdition inv titleIsKey:\n    ConferenceEdition::allInstances() -> isUnique(title)\nendpackage\n\npackage DBLP\n  context BookChapter inv correctPagination:\n    self.iniPage <= self.endPage\nendpackage\n\npackage DBLP\n  context JournalPaper inv correctPagination:  \n    self.iniPage <= self.endPage\nendpackage\n\npackage DBLP\n  context JournalIssue inv correctPagination:\n    self.journalPaper -> forAll(p1,p2 | p1<>p2 implies p1.iniPage > p2.endPage or p2.iniPage > p1.endPage)\nendpackage\n\npackage DBLP\n  context EditedBook inv correctPagination:\n  self.bookChapter -> forAll(c1,c2 | c1<>c2 implies c1.iniPage > c2.endPage or c2.iniPage > c1.endPage)\nendpackage\n\npackage DBLP\n  context BookSeriesIssue inv correctPagination:\n    self.bookChapter -> forAll(c1,c2 | c1<>c2 implies c1.iniPage > c2.endPage or c2.iniPage > c1.endPage)\nendpackage\n\npackage DBLP\n  context Journal inv consecutiveVolumes:\n    self.journalVolume -> sortedBy(volume).volume = sequence{1..self.journalVolume()->size()}\nendpackage\n\npackage DBLP\n  context EditedBook inv compatibleYear:\n    (self.conferenceEdition -> notEmpty()) implies self.publicationYear >= self.conferenceEdition.year\nendpackage\n\npackage DBLP\n  context BookSeriesIssue inv compatibleYear:\n    (self.conferenceEdition -> notEmpty()) implies self.publicationYear >= self.conferenceEdition.year \nendpackage\n\npackage DBLP\n  context JournalIssue inv compatibleYear:\n    (self.conferenceEdition -> notEmpty()) implies self.year >= self.conferenceEdition.year \nendpackage\n\npackage DBLP\n  context EditedBook inv editedBookWithoutRepetitions:\n    self.bookSection -> isUnique(title)\nendpackage\n\npackage DBLP\n  context BookSeriesIssue inv bookSeriesIssueWithoutRepetitions:\n    self.bookSection -> isUnique(title)\nendpackage\n\npackage DBLP\n  context JournalSection inv journalSectionWithoutRepetitions:\n    self.journalPaper -> isUnique(title)\nendpackage\n\npackage DBLP\n  context BookSection inv bookSectionWithoutRepetitions:\n    self.bookChapter -> isUnique(title)\nendpackage\n\npackage DBLP\n  context ConferenceEdition inv conferenceIsPublished:\n    self.editedBook -> notEmpty() or self.bookSeriesIssue -> notEmpty() or self.journalIssue -> notEmpty()\nendpackage\n\npackage DBLP\n  context Person::numPublications:Natural\n    derive: self.publication -> size()\nendpackage\n\npackage DBLP\n  context JournalIssue::numPages:Natural\n    derive: self.journalPaper -> sortedBy(endPage) -> last().endPage\nendpackage\n\n--package DBLP\n  --context Publication::year():Year\n    --body: (abstract)\n--endpackage\n\npackage DBLP\n  context EditedBook::year():Year\n    body: self.publicationYear\nendpackage\n\npackage DBLP\n  context AuthoredBook::year():Year\n    body: self.publicationYear\nendpackage\n\npackage DBLP\n  context BookChapter::year():Year\n    body: if self.editedBook -> notEmpty() then self.editedBook.publicationYear else self.bookSeriesIssue.publicationYear\nendpackage\n\npackage DBLP\n  context JournalPaper::year():Year\n    body: self.journalIssue.year\nendpackage\n\npackage DBLP\n  context Publication::edition():String\n    body: (abstract)\nendpackage\n\npackage DBLP\n  context EditedBook::edition():String\n    body: self.publisher.concat(self.publicationYear)\nendpackage\n\npackage DBLP\n  context AuthoredBook::edition():String\n    body: self.publisher.concat(self.publicationYear)\nendpackage\n\npackage DBLP\n  context BookChapter::edition():String\n    body: if (self.conferencePaper)\n          then \n            if self.editedBook -> notEmpty()\n              then \n                   self.editedBook.conferenceEdition.conferenceSeries.acronym.concat(self.editedBook.conferenceEdition.year.concat(self.iniPage.concat(self.endPage))) \n              else \n                   self.bookSeriesIssue.conferenceEdition.conferenceSeries.acronym.concat(self.bookSeriesIssue.conferenceEdition.year.concat(self.iniPage.concat(self.endPage)))                    \n            else \n              if self.editedBook -> notEmpty() \n                then \n                  self.editedBook.title.concat(self.editedBook.publicationYear.concat(self.iniPage.concat(self.endPage)))\n                else \n                  self.bookSeriesIssue.title.concat(self.bookSeriesIssue.publicationYear.concat(self.iniPage.concat(self.endPage)))\nendpackage\n\npackage DBLP\n  context JournalPaper::edition():String\n    body: if (self.conferencePaper)\n          then \n             self.journalIssue.conferenceEdition.conferenceSeries.acronym.concat(self.journalIssue.conferenceEdition.year.concat(self.iniPage.concat(self.endPage)))\n          else \n            self.journalIssue.journalVolume.journal.title.concat(self.journalIssue.journalVolume.volume.concat(self.journalIssue.number.concat(self.iniPage.concat(self.endPage.concat(self.journalIssue.year))))) \n          endif\nendpackage\n\npackage DBLP\n  context Person::Publication:Publication\n    derive: self.editedBook -> union(self.authoredPublication)\nendpackage\n\npackage DBLP\n  context JournalIssue::JournalSection: JournalSection \n    derive: self.journalPaper.journalSection\nendpackage\n\npackage DBLP\n  context EditedBook::BookSection: BookSection \n    derive: self.bookChapter.bookSection\nendpackage\n\npackage DBLP\n  context BookSeriesIssue::BookSection: BookSection \n    derive: self.bookChapter.bookSection\nendpackage"
    },
    {
      "name": "epcPACS3MappingDrctDbtTxcdtrSchmeId",
      "text": "The requirements are as follows:\n\nIn the Direct Debit Transaction model, for the Creditor Scheme Identifier attribute, it should either be undefined or the Private Identification attributes (such as issuer, driver's license number, customer number, social security number, alien registration number, passport number, tax identification number, identity card number, employer identification number, date and place of birth) should not exist. This requirement is in compliance with the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3 and the EBA pacs3 schema. Please note that if these fields are to be mapped correctly to pacs3 Amendment Information Details, only the Other Identification (Private Identification) should be included in the Identifier.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: For Creditor Scheme Id in Direct Debit Transaction (drctDbtTx cdtrSchmeId), only Private Identification \n   Other Identification (prvtId othrId) should be included in the Id, if these fields are to be mapped correctly to \n   pacs3 Amendment Information Details.\n   Ref row 14 on pg 11 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3, and EBA pacs3 schema. */\n\ncontext DirectDebitTransaction1\ninv EPC_PACS3Mapping_drctDbtTxcdtrSchmeId:\ncdtrSchmeId.oclIsUndefined()\nor\n(cdtrSchmeId.id.orgId->size() = 0 and\ncdtrSchmeId.id.prvtId.issr->size() = 0 and\ncdtrSchmeId.id.prvtId.drvrsLicNb->size() = 0 and\ncdtrSchmeId.id.prvtId.cstmrNb->size() = 0 and\ncdtrSchmeId.id.prvtId.sclSctyNb->size() = 0 and\ncdtrSchmeId.id.prvtId.alnRegnNb->size() = 0 and\ncdtrSchmeId.id.prvtId.psptNb->size() = 0  and\ncdtrSchmeId.id.prvtId.taxIdNb->size() = 0 and\ncdtrSchmeId.id.prvtId.idntyCardNb->size() = 0  and\ncdtrSchmeId.id.prvtId.mplyrIdNb->size() = 0 and \ncdtrSchmeId.id.prvtId.dtAndPlcOfBirth->size() = 0)\n\nendpackage"
    },
    {
      "name": "epcRmtInfustrd",
      "text": "The requirement is as follows: \n\nWithin the context of 'RemittanceInformation1' in the package 'isoStdIso20022TechXsdPain00800101', only one occurrence of 'unstructured' is allowed according to the SEPA B2B Direct Debit C2B Implementation Guidelines. The size of 'ustrd' should strictly be equal to 1.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Only one occurrence of 'unstructured' is allowed.\n   See row 6 on pg 14 of SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext RemittanceInformation1\ninv EPC_rmtInfustrd:\nself.ustrd->size() = 1\n\nendpackage"
    }
  ]
}