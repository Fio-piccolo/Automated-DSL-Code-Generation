{
  "train": [
    {
      "name": "epcGrpHdrprvtId",
      "text": "The requirement is as follows: In the context of \"GroupHeader1\" located in the \"isoStdIso20022TechXsdPain00800101\" package, the private identification \"initgPty Id prvtId\" can only occur once at most. That is, if the identifier \"initgPty.id\" is defined or instantiated, the size of the private identification \"prvtId\" should be less than or equal to 1. It is not allowed to have more than one instance of private identification. This is based on reference row 2 on page 7 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Only one occurrence of Private Identification (initgPty Id prvtId) may be present.\n   Ref row 2 on pg 7 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3. */\n\ncontext GroupHeader1\ninv EPC_GrpHdrprvtId:\ninitgPty.id.oclIsUndefined() \nor\ninitgPty.id.prvtId->size() <=1\n\nendpackage"
    },
    {
      "name": "epcGrpHdrInitgPtyIdorgId",
      "text": "The requirement is as follows: \n\nFor the `GroupHeader1` context in the `isoStdIso20022TechXsdPain00800101` package, the organisation identification (`InitgPty Id orgId`) should contain only one of the following subelements: BIC, IBEI, BEI, EANGLN, USCHU, DUNS, BkPryId, TaxIdNb, or prtryId. If the size of `initgPty.id.orgId` equals 1, this implies that the total size of all these subelements should be less or equal to 1. This rule is stated in the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3, on page 7, row 1.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* The Organisation Identification (InitgPty Id orgId) can only contain one of the subelements BIC, IBEI, \n   BEI, EANGLN, USCHU, DUNS, BkPryId, TaxIdNb, or prtryId. \n   See row 1 on pg 7 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3 */\ncontext GroupHeader1\ninv EPC_GprHdrInitgPtyIdorgId:\n\ninitgPty.id.orgId->size() = 1 implies \n (initgPty.id.orgId.bIC->size() +\n  initgPty.id.orgId.iBEI->size() +\n  initgPty.id.orgId.bEI->size() +\n  initgPty.id.orgId.eANGLN->size() +\n  initgPty.id.orgId.uSCHU->size() +\n  initgPty.id.orgId.dUNS->size() +\n  initgPty.id.orgId.bkPtyId->size() +\n  initgPty.id.orgId.taxIdNb->size() +\n  initgPty.id.orgId.prtryId->size()) <= 1\n\nendpackage"
    },
    {
      "name": "Basic-Sat-OCL-10",
      "text": "The requirements are as follows:\n\n1. Within Package_1 context, for all instances of A2, attribute 'at' should always be greater than or equal to the attribute 'at' of associate A1.\n2. In the same package, for all instances of A3, attribute 'at' should always be greater than or equal to the attribute 'at' of associate A2.\n3. Similarly, for all instances of A4, attribute 'at' should always be greater than or equal to the attribute 'at' of associate A3.\n4. For all instances of A5, attribute 'at' should always be greater than or equal to the attribute 'at' of associate A4.\n5. For all instances of A6, attribute 'at' should always be greater than or equal to the attribute 'at' of associate A5.\n6. For all instances of A7, attribute 'at' should always be greater than or equal to the attribute 'at' of associate A6.\n7. For all instances of A8, attribute 'at' should always be greater than or equal to the attribute 'at' of associate A7.\n8. For all instances of A9, attribute 'at' should always be greater than or equal to the attribute 'at' of associate A8.\n9. For all instances of A10, attribute 'at' should always be greater than or equal to the attribute 'at' of associate A9.\n10. Lastly, for all instances of A1, attribute 'at' should always be greater than or equal to the attribute 'at' of associate A10. \n\nEssentially, within Package_1, each class 'A' (from A2 to A10) must contain an attribute 'at' value that is no less than the same attribute 'at' of the class 'A' preceding it (starting from A1 for A2) in a sequential numerical order.",
      "label": "package Package_1\ncontext A2 inv: A2::allInstances()->forAll(a|a.at>=a.a1.at)\nendpackage\npackage Package_1\ncontext A3 inv: A3::allInstances()->forAll(a|a.at>=a.a2.at)\nendpackage\npackage Package_1\ncontext A4 inv: A4::allInstances()->forAll(a|a.at>=a.a3.at)\nendpackage\npackage Package_1\ncontext A5 inv: A5::allInstances()->forAll(a|a.at>=a.a4.at)\nendpackage\npackage Package_1\ncontext A6 inv: A6::allInstances()->forAll(a|a.at>=a.a5.at)\nendpackage\npackage Package_1\ncontext A7 inv: A7::allInstances()->forAll(a|a.at>=a.a6.at)\nendpackage\npackage Package_1\ncontext A8 inv: A8::allInstances()->forAll(a|a.at>=a.a7.at)\nendpackage\npackage Package_1\ncontext A9 inv: A9::allInstances()->forAll(a|a.at>=a.a8.at)\nendpackage\npackage Package_1\ncontext A10 inv: A10::allInstances()->forAll(a|a.at>=a.a9.at)\nendpackage\npackage Package_1\ncontext A1 inv: A1::allInstances()->forAll(a|a.at>=a.a10.at)\nendpackage"
    },
    {
      "name": "epcAosDrctDbtTx",
      "text": "The requirement is as follows:\n\nIn the context of the DirectDebitTransaction1 in the isoStdIso20022TechXsdPain00800101 package, a condition must be validated. The condition is that both PreNotificationId and PreNotificationDate, denoted by preNtfctnId and preNtfctnDt respectively, should not exist or be set. This means, the size of the elements contained by both preNtfctnId and preNtfctnDt should be zero. This restriction is in place due to potential rejection by banks which are not in the AOS community should these elements are present, as per the warning annotation in the code and as referred to in section 1.2 of the SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The elements PreNtfctnId and PreNtfctnDt in DrctDbtTx are AOS only. Instructed banks that \n   are not in the AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransaction1\ninv EPC_AOS_DrctDbtTx:\npreNtfctnId->size() = 0 \nand  \npreNtfctnDt->size() = 0\n\nendpackage"
    },
    {
      "name": "epcPmtInfchrgBr",
      "text": "The requirement is as follows: For the package isoStdIso20022TechXsdPain00800101, specifically within the context of PaymentInstructionInformation2, the Charge Bearer ('chrgBr') parameter can only be set to 'SLEV'. This is in accordance with row 10 of section 2.1.3 of Payment Information page 9 of the SEPA B2B Direct Debit C2B Implementation Guidelines document.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Charge Bearer (PmtInf chrgBr) can only be set to 'SLEV'.\n  See row 10 of section 2.1.3 of Payment Information pg 9 of SEPA B2B Direct Debit C2B Implementation \n  Guidelines document. */\n\ncontext PaymentInstructionInformation2\ninv EPC_PmtInfchrgBr:\nchrgBr = 'SLEV'\n\nendpackage"
    },
    {
      "name": "chargeBearerRule",
      "text": "The requirements are as follows: \n\nIf the field 'ChargeBearer' is present within the 'PaymentInstructionInformation2' context, then the field 'ChargeBearer' within 'DirectDebitTransactionInformation' context is not allowed to be present. Conversely, if the field 'ChargeBearer' within 'DirectDebitTransactionInformation' context is present, then the field 'ChargeBearer' within 'PaymentInstructionInformation2' context is not permitted to exist. Both 'DirectDebitTransactionInformation/ChargeBearer' and 'ChargeBearer' within 'PaymentInstructionInformation2' context can be absent.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* If ChargeBearer is present, then DirectDebitTransactionInformation/ChargeBearer is not \n   allowed. If DirectDebitTransactionInformation/ChargeBearer is present, then ChargeBearer \n   is not allowed. DirectDebitTransactionInformation/ChargeBearer and ChargeBearer may both\n   be absent. \n   Ref. p.86 of Payment-standards Initiation updated.pdf */\t\n\ncontext PaymentInstructionInformation2\ninv ChargeBearerRule:\n(chrgBr->size() > 0 implies drctDbtTxInf->forAll(chrgBr.oclIsUndefined()))\nand\n(not drctDbtTxInf->forAll(chrgBr.oclIsUndefined()) implies chrgBr->size() = 0)\n\nendpackage"
    },
    {
      "name": "Atoms-Molecules-Sat",
      "text": "The requirements are as follows:\n\n1. Each instance of the Atom class must have a weight that is greater than zero. This requirement ensures that atoms cannot have a negative or zero atomic weight.\n2. The weight of an Atom must be unique in all instances of Atom. This implies an atom cannot share the same atomic weight with another atom.\n3. For every instance of the Molecule class, none of the particles (which are assumed to be instances of the Atom) can be a noble gas. This implies all instances of Molecule must not consist of noble gases.",
      "label": "package diagram\n\ncontext Atom inv NonNegativeAtomicWeight: \n  Atom::allInstances()->forAll(z| z.weight > 0)\n\ncontext Atom inv UniqueAtomicWeight:\n  Atom::allInstances()->isUnique(x| x.weight)\n\ncontext Molecule inv InertNobleGases: \n  Molecule::allInstances()->forAll(z|z.particle->select(x|x.nobleGas)->isEmpty())\n\nendpackage"
    },
    {
      "name": "epcPmtTpInfSeqTp",
      "text": "The requirements are as follows:\n\nFor every Direct Debit Transaction Information within a Payment Instruction Information, if the 'Amendment Indicator' is set to 'TRUE' and the 'Original Debtor Agent' is identified with a proprietary ID 'SMNDA', then the 'Sequence Type' under Payment Type Information must be set to 'FRST'.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* If 'Amendment Indicator' is 'TRUE', and 'Original Debtor Agent' is set to 'SMNDA', Sequence Type \n   (PmtInf pmtTpInf SeqTp) must be set to 'FRST'. */\n\ncontext PaymentInstructionInformation2\ninv EPC_pmtTpInfSeqTp:\nself.drctDbtTxInf->forAll(a | \n  (a.drctDbtTx.mndtRltdInf.amdmntInd=true and \n  a.drctDbtTx.mndtRltdInf.amdmntInfDtls.orgnlDbtrAgt.finInstnId.prtryId.id = 'SMNDA') implies \n      a.pmtTpInf.seqTp = 'FRST')\n\nendpackage"
    },
    {
      "name": "epcAosDbtrAgtAcct",
      "text": "The requirements are as follows:\n\nWithin the context of DirectDebitTransactionInformation1 within the package isoStdIso20022TechXsdPain00800101, there is an invariant EPC_AOS_DbtrAgtAcct. \n\nThis implies that the size of the debtor agent account (dbtrAgtAcct) must always be 0. \n\nThis implementation is specific to AOS community only and if banks not in the AOS community receive messages containing these elements, they may reject them. This information is referenced from section 1.2 of the SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The element DbtrAgtAcct in DrctDbtTxInf is AOS only. Instructed banks that are not in the\n   AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_AOS_DbtrAgtAcct:\ndbtrAgtAcct->size() = 0\n\nendpackage"
    },
    {
      "name": "epcAosRmtInfStrd",
      "text": "The requirements are as follows:\n\nIn the RemittanceInformation1 context within the isoStdIso20022TechXsdPain00800101 package, the elements RfrdDocInf, RfrdDocRltdDt, RfrdDocAmt, Prtry which is within CdtrRefInf cdtrRefTp, Invcr, Invcee, and AddtlRmtInf within RmtInf Strd should not be included within the system or process being specified. \n\nThat is, their sizes should each be zero. This means each of these elements should be empty or not exist. Please note that this rule applies to non-AOS-banks. Should these elements be included, non-AOS instructed banks may reject the messages containing these elements. \n\nMore specific rules and guidelines can be found in Section 1.2 of the SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The elements RfrdDocInf, RfrdDocRltdDt, RfrdDocAmt, CdtrRefInf cdtrRefTp Prtry, Invcr, Invcee \n   and AddtlRmtInf in RmtInf Strd are AOS only. Instructed banks that are not in the AOS community may reject\n   messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext RemittanceInformation1\ninv EPC_AOS_RmtInfStrd:\nstrd.rfrdDocInf->size() = 0 and \nstrd.rfrdDocRltdDt->size() = 0 and \nstrd.rfrdDocAmt->size() = 0 and\nstrd.cdtrRefInf.cdtrRefTp.prtry->size() = 0 and\nstrd.invcr->size() = 0 and \nstrd.invcee->size() = 0 and \nstrd.addtlRmtInf->size() = 0\n\nendpackage"
    },
    {
      "name": "ultimateCreditorGuideline",
      "text": "The requirement is as follows:\n\nFor every instance of PaymentInstructionInformation2, the name of the UltimateCreditor must be unique if it exists. Only one organization ID is allowed and must be unique for the UltimateCreditor and Creditor. The condition applies to various identifiers such as BIC, IBEI, BEI, EANGLN, USCHU, DUNS, bank party ID, tax ID number, proprietary ID and others.\n\nSimilarly, only one private ID is allowed and must not be the same for the UltimateCreditor and Creditor. This applies to identifiers such as driver's license number, customer number, social security number, alien registration number, passport number, tax ID number, identity card number, employer ID number and other ID. There is also a special condition that for 'other ID', either its ID or ID type should be different. \n\nIn essence, the UltimateCreditor in the PaymentInstructionInformation2 should be different from the Creditor, considering all the identifiers specific to them.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Guideline - UltimateCreditor in the PaymentInformation may only be present if different from Creditor. \n   Note: Only one occurrence of prvtId is allowed in ultmtCdtr and cdtr.\n   Ref p.86 of Payments_Standards-Initiated_updated.pdf. */\n\ncontext PaymentInstructionInformation2\ninv UltimateCreditorGuideline:\t\t\t\n(ultmtCdtr.nm->size() = 1 implies \n                ultmtCdtr.nm <> cdtr.nm) and\n\n((ultmtCdtr.id.orgId.bIC->size() = 1 and cdtr.id.orgId.bIC->size() = 1) implies\n    ultmtCdtr.id.orgId.bIC <> cdtr.id.orgId.bIC) and\n\n((ultmtCdtr.id.orgId.iBEI->size() = 1 and cdtr.id.orgId.iBEI->size() = 1) implies\n    ultmtCdtr.id.orgId.iBEI <> cdtr.id.orgId.iBEI) and\n\n((ultmtCdtr.id.orgId.bEI->size() = 1 and cdtr.id.orgId.bEI->size() = 1) implies\n    ultmtCdtr.id.orgId.bEI <> cdtr.id.orgId.bEI) and \n\n((ultmtCdtr.id.orgId.eANGLN->size() = 1 and cdtr.id.orgId.eANGLN->size() = 1) implies\n    ultmtCdtr.id.orgId.eANGLN <> cdtr.id.orgId.eANGLN) and\n\n((ultmtCdtr.id.orgId.uSCHU->size() = 1 and cdtr.id.orgId.uSCHU->size() = 1) implies\n    ultmtCdtr.id.orgId.uSCHU <> cdtr.id.orgId.uSCHU) and\n\n((ultmtCdtr.id.orgId.dUNS->size() = 1 and cdtr.id.orgId.dUNS->size() = 1) implies\n    ultmtCdtr.id.orgId.dUNS <> cdtr.id.orgId.dUNS) and\n\n((ultmtCdtr.id.orgId.bkPtyId->size() = 1 and cdtr.id.orgId.bkPtyId->size() = 1) implies\n    ultmtCdtr.id.orgId.bkPtyId <> cdtr.id.orgId.bkPtyId) and\n\n((ultmtCdtr.id.orgId.taxIdNb->size() = 1 and cdtr.id.orgId.taxIdNb->size() = 1) implies\n    ultmtCdtr.id.orgId.taxIdNb <> cdtr.id.orgId.taxIdNb) and\n\n((ultmtCdtr.id.orgId.prtryId.id->size() = 1 and cdtr.id.orgId.prtryId.id->size() = 1) implies\n    ultmtCdtr.id.orgId.prtryId.id <> cdtr.id.orgId.prtryId.id) and \n\n((ultmtCdtr.id.prvtId.drvrsLicNb->size() = 1 and cdtr.id.prvtId.drvrsLicNb->size() = 1) implies\n    ultmtCdtr.id.prvtId.drvrsLicNb <> cdtr.id.prvtId.drvrsLicNb) and\n\n((ultmtCdtr.id.prvtId.cstmrNb->size() = 1 and cdtr.id.prvtId.cstmrNb->size() = 1) implies\n    ultmtCdtr.id.prvtId.cstmrNb <> cdtr.id.prvtId.cstmrNb) and\n\n((ultmtCdtr.id.prvtId.sclSctyNb->size() = 1 and cdtr.id.prvtId.sclSctyNb->size() = 1) implies\n    ultmtCdtr.id.prvtId.sclSctyNb <> cdtr.id.prvtId.sclSctyNb) and\n\n((ultmtCdtr.id.prvtId.alnRegnNb->size() = 1 and cdtr.id.prvtId.alnRegnNb->size() = 1) implies\n    ultmtCdtr.id.prvtId.alnRegnNb <> cdtr.id.prvtId.alnRegnNb) and \n\n((ultmtCdtr.id.prvtId.psptNb->size() = 1 and cdtr.id.prvtId.psptNb->size() = 1) implies\n    ultmtCdtr.id.prvtId.psptNb <> cdtr.id.prvtId.psptNb) and \n\n((ultmtCdtr.id.prvtId.taxIdNb->size() = 1 and cdtr.id.prvtId.taxIdNb->size() = 1) implies\n    ultmtCdtr.id.prvtId.taxIdNb <> cdtr.id.prvtId.taxIdNb) and\n\n((ultmtCdtr.id.prvtId.idntyCardNb->size() = 1 and cdtr.id.prvtId.idntyCardNb->size() = 1) implies\n    ultmtCdtr.id.prvtId.idntyCardNb <> cdtr.id.prvtId.idntyCardNb) and\n\n((ultmtCdtr.id.prvtId.mplyrIdNb->size() = 1 and cdtr.id.prvtId.mplyrIdNb->size() = 1) implies\n    ultmtCdtr.id.prvtId.mplyrIdNb <> cdtr.id.prvtId.mplyrIdNb) and \n\n((ultmtCdtr.id.prvtId.othrId->size() = 1 and cdtr.id.prvtId.othrId->size() = 1) implies\n    (ultmtCdtr.id.prvtId.othrId.id <> cdtr.id.prvtId.othrId.id or\n    ultmtCdtr.id.prvtId.othrId.idTp <> cdtr.id.prvtId.othrId.idTp))\n\t\t\t\nendpackage"
    },
    {
      "name": "epcCdtrSchemeIdPrvtIdOnlyOne",
      "text": "The requirements are as follows:\n\nIn the context of a DirectDebitTransaction1 in isoStdIso20022TechXsdPain00800101 package, there should be only one 'Private Identification' allowed for 'Creditor Schemes'. This rule is maintained by checking either the 'Creditor Schemes' is undefined or the size of 'Private Identification' in 'Creditor Schemes' should not exceed 1. This rule is in accordance with the SEPA B2B Direct Debit C2B Implementation Guidelines, specifically referring to row 3 of page 12.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Only one occurrence of 'Private Identification' is allowed for Creditor Schemes (cdtrSchmeId Id prvtId).\n   See row 3 of page 12 SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransaction1\ninv EPC_cdtrSchmeId_prvtIdOnlyOne:\ncdtrSchmeId.oclIsUndefined()\nor\ncdtrSchmeId.id.prvtId->size() <=1\n\nendpackage"
    },
    {
      "name": "epcAosCdtrAgtAcct",
      "text": "Here is the requirement described in the OCL code:\n\nA warning has been provided that the element, 'CdrAgtAcct', in Payment Information (PmtInf) is only applicable to the AOS community. Banks that are not part of this community might reject messages containing these elements. You can refer to section 1.2 of the SEPA B2B Direct Debit C2B Implementation Guidelines for more details. \n\nIn the context of PaymentInstructionInformation2, there's an invariant EPC_AOS_CdtrAgtAcct. This rule states that the size of the collection 'cdtrAgtAcct' should be equal to zero. This implies, for PaymentInstructionInformation2 object, there should not exist an instance of 'cdtrAgtAcct'.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The element CdrAgtAcct in PmtInf is AOS only. Instructed banks that are not in the \n   AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext PaymentInstructionInformation2\ninv EPC_AOS_CdtrAgtAcct:\ncdtrAgtAcct->size() = 0\n\nendpackage"
    },
    {
      "name": "epcAosChrgsAcct",
      "text": "The requirements are as follows:\n\nWithin the package isoStdIso20022TechXsdPain00800101 for the specified model, in the context of PaymentInstructionInformation2, a certain condition is required for an invariant called EPC_AOS_ChrgsAcct. This invariant condition is that the size of the charges account (i.e., the number of elements in the chrgsAcct collection) must be equal to zero.\n\nPlease note that there is a warning that the element ChrgsAcct within PmtInf is only available for AOS; instructed banks that are not part of the AOS community may reject messages containing these elements. Reference is made to section 1.2 of the SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The element ChrgsAcct in PmtInf is AOS only. Instructed banks that are not in the AOS \n   community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext PaymentInstructionInformation2\ninv EPC_AOS_ChrgsAcct:\nchrgsAcct->size() = 0\n\nendpackage"
    },
    {
      "name": "paymentTypeInformationRule",
      "text": "The requirement is as follows:\nWithin the context of the PaymentInstructionInformation2 model, if the PaymentTypeInformation attribute is present and its size is greater than zero, then it necessitates that all instances of DirectDebitTransactionInformation must not contain the PaymentTypeInformation attribute. This is referenced on page 86 of the Payments_Standards-Initiation_updated.pdf document.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* If PaymentTypeInformation is present, then DirectDebitTransactionInformation/PaymentTypeInformation is\n   not allowed.\n   Ref. p.86 of Payments_Standards-Initiation_updated.pdf. */\n\ncontext PaymentInstructionInformation2\ninv PaymentTypeInformationRule:\npmtTpInf->size()>0 implies drctDbtTxInf->forAll(pmtTpInf.oclIsUndefined())\n\t\t\t\nendpackage"
    },
    {
      "name": "epcAosMndtRltInf",
      "text": "The requirement is as follows: \n\nIn the context of the package named 'isoStdIso20022TechXsdPain00800101', within the class 'MandateRelatedInformation1' there is a requirement to ensure that the collections 'frstColltnDt', 'fnlColltnDt' and 'frqcy', representing the first collection date, final collection date, and frequency, respectively, must not have any elements in them, or in other words, their size should be zero. This is a constraint specific to a community named AOS. Banks that are not part of the AOS community may reject messages containing these elements. Reference can be found in section 1.2 of the SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The elements FrstColltnDt, FnlColltnDt and Frqcy in MndtRltInf are AOS only. Instructed banks\n   that are not in the AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext MandateRelatedInformation1\ninv EPC_AOS_MndtRltInf:\nfrstColltnDt->size() = 0 and \nfnlColltnDt->size() = 0 and \nfrqcy->size() = 0\n\nendpackage"
    },
    {
      "name": "grouping1Rule",
      "text": "The requirement is as follows: In the context of the Pain00800101 object, if the Grouping element under GroupHeader is present and its value equals 'GRPD', then there must be exactly one occurrence of the PaymentInformation element. This rule is referenced on page 79 of the Payments_Standards-Initiation_updated.pdf document.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* If GroupHeader/Grouping is present and equals GRPD, then one and only one occurrence of \n   PaymentInformation must be present.\n   Ref. p.79 of Payments_Standards-Initiation_updated.pdf. */\n\ncontext Pain00800101\ninv Grouping1Rule:\n(grpHdr.grpg->size() > 0 and grpHdr.grpg = 'GRPD') implies pmtInf->size() = 1\n\nendpackage"
    },
    {
      "name": "Basic-Sat-OCL-100",
      "text": "The requirements are as follows:\n\nEvery instance of class A2 should have a value of \"at\" that is greater than or equal to the value of \"at\" for the corresponding instance of class A1. This logic should apply sequentially to all classes up to class A100, where every instance of class A100 should have a value of \"at\" that is greater than or equal to the value of \"at\" for the corresponding instance of class A99. \n\nAnd, finally, every instance of class A1 should have a value of \"at\" that is greater than or equal to the value of \"at\" for the corresponding instance of class A100, effectively closing the loop.",
      "label": "package Package_1\ncontext A2 inv: A2::allInstances()->forAll(a|a.at>=a.a1.at)\nendpackage\npackage Package_1\ncontext A3 inv: A3::allInstances()->forAll(a|a.at>=a.a2.at)\nendpackage\npackage Package_1\ncontext A4 inv: A4::allInstances()->forAll(a|a.at>=a.a3.at)\nendpackage\npackage Package_1\ncontext A5 inv: A5::allInstances()->forAll(a|a.at>=a.a4.at)\nendpackage\npackage Package_1\ncontext A6 inv: A6::allInstances()->forAll(a|a.at>=a.a5.at)\nendpackage\npackage Package_1\ncontext A7 inv: A7::allInstances()->forAll(a|a.at>=a.a6.at)\nendpackage\npackage Package_1\ncontext A8 inv: A8::allInstances()->forAll(a|a.at>=a.a7.at)\nendpackage\npackage Package_1\ncontext A9 inv: A9::allInstances()->forAll(a|a.at>=a.a8.at)\nendpackage\npackage Package_1\ncontext A10 inv: A10::allInstances()->forAll(a|a.at>=a.a9.at)\nendpackage\npackage Package_1\ncontext A11 inv: A11::allInstances()->forAll(a|a.at>=a.a10.at)\nendpackage\npackage Package_1\ncontext A12 inv: A12::allInstances()->forAll(a|a.at>=a.a11.at)\nendpackage\npackage Package_1\ncontext A13 inv: A13::allInstances()->forAll(a|a.at>=a.a12.at)\nendpackage\npackage Package_1\ncontext A14 inv: A14::allInstances()->forAll(a|a.at>=a.a13.at)\nendpackage\npackage Package_1\ncontext A15 inv: A15::allInstances()->forAll(a|a.at>=a.a14.at)\nendpackage\npackage Package_1\ncontext A16 inv: A16::allInstances()->forAll(a|a.at>=a.a15.at)\nendpackage\npackage Package_1\ncontext A17 inv: A17::allInstances()->forAll(a|a.at>=a.a16.at)\nendpackage\npackage Package_1\ncontext A18 inv: A18::allInstances()->forAll(a|a.at>=a.a17.at)\nendpackage\npackage Package_1\ncontext A19 inv: A19::allInstances()->forAll(a|a.at>=a.a18.at)\nendpackage\npackage Package_1\ncontext A20 inv: A20::allInstances()->forAll(a|a.at>=a.a19.at)\nendpackage\npackage Package_1\ncontext A21 inv: A21::allInstances()->forAll(a|a.at>=a.a20.at)\nendpackage\npackage Package_1\ncontext A22 inv: A22::allInstances()->forAll(a|a.at>=a.a21.at)\nendpackage\npackage Package_1\ncontext A23 inv: A23::allInstances()->forAll(a|a.at>=a.a22.at)\nendpackage\npackage Package_1\ncontext A24 inv: A24::allInstances()->forAll(a|a.at>=a.a23.at)\nendpackage\npackage Package_1\ncontext A25 inv: A25::allInstances()->forAll(a|a.at>=a.a24.at)\nendpackage\npackage Package_1\ncontext A26 inv: A26::allInstances()->forAll(a|a.at>=a.a25.at)\nendpackage\npackage Package_1\ncontext A27 inv: A27::allInstances()->forAll(a|a.at>=a.a26.at)\nendpackage\npackage Package_1\ncontext A28 inv: A28::allInstances()->forAll(a|a.at>=a.a27.at)\nendpackage\npackage Package_1\ncontext A29 inv: A29::allInstances()->forAll(a|a.at>=a.a28.at)\nendpackage\npackage Package_1\ncontext A30 inv: A30::allInstances()->forAll(a|a.at>=a.a29.at)\nendpackage\npackage Package_1\ncontext A31 inv: A31::allInstances()->forAll(a|a.at>=a.a30.at)\nendpackage\npackage Package_1\ncontext A32 inv: A32::allInstances()->forAll(a|a.at>=a.a31.at)\nendpackage\npackage Package_1\ncontext A33 inv: A33::allInstances()->forAll(a|a.at>=a.a32.at)\nendpackage\npackage Package_1\ncontext A34 inv: A34::allInstances()->forAll(a|a.at>=a.a33.at)\nendpackage\npackage Package_1\ncontext A35 inv: A35::allInstances()->forAll(a|a.at>=a.a34.at)\nendpackage\npackage Package_1\ncontext A36 inv: A36::allInstances()->forAll(a|a.at>=a.a35.at)\nendpackage\npackage Package_1\ncontext A37 inv: A37::allInstances()->forAll(a|a.at>=a.a36.at)\nendpackage\npackage Package_1\ncontext A38 inv: A38::allInstances()->forAll(a|a.at>=a.a37.at)\nendpackage\npackage Package_1\ncontext A39 inv: A39::allInstances()->forAll(a|a.at>=a.a38.at)\nendpackage\npackage Package_1\ncontext A40 inv: A40::allInstances()->forAll(a|a.at>=a.a39.at)\nendpackage\npackage Package_1\ncontext A41 inv: A41::allInstances()->forAll(a|a.at>=a.a40.at)\nendpackage\npackage Package_1\ncontext A42 inv: A42::allInstances()->forAll(a|a.at>=a.a41.at)\nendpackage\npackage Package_1\ncontext A43 inv: A43::allInstances()->forAll(a|a.at>=a.a42.at)\nendpackage\npackage Package_1\ncontext A44 inv: A44::allInstances()->forAll(a|a.at>=a.a43.at)\nendpackage\npackage Package_1\ncontext A45 inv: A45::allInstances()->forAll(a|a.at>=a.a44.at)\nendpackage\npackage Package_1\ncontext A46 inv: A46::allInstances()->forAll(a|a.at>=a.a45.at)\nendpackage\npackage Package_1\ncontext A47 inv: A47::allInstances()->forAll(a|a.at>=a.a46.at)\nendpackage\npackage Package_1\ncontext A48 inv: A48::allInstances()->forAll(a|a.at>=a.a47.at)\nendpackage\npackage Package_1\ncontext A49 inv: A49::allInstances()->forAll(a|a.at>=a.a48.at)\nendpackage\npackage Package_1\ncontext A50 inv: A50::allInstances()->forAll(a|a.at>=a.a49.at)\nendpackage\npackage Package_1\ncontext A51 inv: A51::allInstances()->forAll(a|a.at>=a.a50.at)\nendpackage\npackage Package_1\ncontext A52 inv: A52::allInstances()->forAll(a|a.at>=a.a51.at)\nendpackage\npackage Package_1\ncontext A53 inv: A53::allInstances()->forAll(a|a.at>=a.a52.at)\nendpackage\npackage Package_1\ncontext A54 inv: A54::allInstances()->forAll(a|a.at>=a.a53.at)\nendpackage\npackage Package_1\ncontext A55 inv: A55::allInstances()->forAll(a|a.at>=a.a54.at)\nendpackage\npackage Package_1\ncontext A56 inv: A56::allInstances()->forAll(a|a.at>=a.a55.at)\nendpackage\npackage Package_1\ncontext A57 inv: A57::allInstances()->forAll(a|a.at>=a.a56.at)\nendpackage\npackage Package_1\ncontext A58 inv: A58::allInstances()->forAll(a|a.at>=a.a57.at)\nendpackage\npackage Package_1\ncontext A59 inv: A59::allInstances()->forAll(a|a.at>=a.a58.at)\nendpackage\npackage Package_1\ncontext A60 inv: A60::allInstances()->forAll(a|a.at>=a.a59.at)\nendpackage\npackage Package_1\ncontext A61 inv: A61::allInstances()->forAll(a|a.at>=a.a60.at)\nendpackage\npackage Package_1\ncontext A62 inv: A62::allInstances()->forAll(a|a.at>=a.a61.at)\nendpackage\npackage Package_1\ncontext A63 inv: A63::allInstances()->forAll(a|a.at>=a.a62.at)\nendpackage\npackage Package_1\ncontext A64 inv: A64::allInstances()->forAll(a|a.at>=a.a63.at)\nendpackage\npackage Package_1\ncontext A65 inv: A65::allInstances()->forAll(a|a.at>=a.a64.at)\nendpackage\npackage Package_1\ncontext A66 inv: A66::allInstances()->forAll(a|a.at>=a.a65.at)\nendpackage\npackage Package_1\ncontext A67 inv: A67::allInstances()->forAll(a|a.at>=a.a66.at)\nendpackage\npackage Package_1\ncontext A68 inv: A68::allInstances()->forAll(a|a.at>=a.a67.at)\nendpackage\npackage Package_1\ncontext A69 inv: A69::allInstances()->forAll(a|a.at>=a.a68.at)\nendpackage\npackage Package_1\ncontext A70 inv: A70::allInstances()->forAll(a|a.at>=a.a69.at)\nendpackage\npackage Package_1\ncontext A71 inv: A71::allInstances()->forAll(a|a.at>=a.a70.at)\nendpackage\npackage Package_1\ncontext A72 inv: A72::allInstances()->forAll(a|a.at>=a.a71.at)\nendpackage\npackage Package_1\ncontext A73 inv: A73::allInstances()->forAll(a|a.at>=a.a72.at)\nendpackage\npackage Package_1\ncontext A74 inv: A74::allInstances()->forAll(a|a.at>=a.a73.at)\nendpackage\npackage Package_1\ncontext A75 inv: A75::allInstances()->forAll(a|a.at>=a.a74.at)\nendpackage\npackage Package_1\ncontext A76 inv: A76::allInstances()->forAll(a|a.at>=a.a75.at)\nendpackage\npackage Package_1\ncontext A77 inv: A77::allInstances()->forAll(a|a.at>=a.a76.at)\nendpackage\npackage Package_1\ncontext A78 inv: A78::allInstances()->forAll(a|a.at>=a.a77.at)\nendpackage\npackage Package_1\ncontext A79 inv: A79::allInstances()->forAll(a|a.at>=a.a78.at)\nendpackage\npackage Package_1\ncontext A80 inv: A80::allInstances()->forAll(a|a.at>=a.a79.at)\nendpackage\npackage Package_1\ncontext A81 inv: A81::allInstances()->forAll(a|a.at>=a.a80.at)\nendpackage\npackage Package_1\ncontext A82 inv: A82::allInstances()->forAll(a|a.at>=a.a81.at)\nendpackage\npackage Package_1\ncontext A83 inv: A83::allInstances()->forAll(a|a.at>=a.a82.at)\nendpackage\npackage Package_1\ncontext A84 inv: A84::allInstances()->forAll(a|a.at>=a.a83.at)\nendpackage\npackage Package_1\ncontext A85 inv: A85::allInstances()->forAll(a|a.at>=a.a84.at)\nendpackage\npackage Package_1\ncontext A86 inv: A86::allInstances()->forAll(a|a.at>=a.a85.at)\nendpackage\npackage Package_1\ncontext A87 inv: A87::allInstances()->forAll(a|a.at>=a.a86.at)\nendpackage\npackage Package_1\ncontext A88 inv: A88::allInstances()->forAll(a|a.at>=a.a87.at)\nendpackage\npackage Package_1\ncontext A89 inv: A89::allInstances()->forAll(a|a.at>=a.a88.at)\nendpackage\npackage Package_1\ncontext A90 inv: A90::allInstances()->forAll(a|a.at>=a.a89.at)\nendpackage\npackage Package_1\ncontext A91 inv: A91::allInstances()->forAll(a|a.at>=a.a90.at)\nendpackage\npackage Package_1\ncontext A92 inv: A92::allInstances()->forAll(a|a.at>=a.a91.at)\nendpackage\npackage Package_1\ncontext A93 inv: A93::allInstances()->forAll(a|a.at>=a.a92.at)\nendpackage\npackage Package_1\ncontext A94 inv: A94::allInstances()->forAll(a|a.at>=a.a93.at)\nendpackage\npackage Package_1\ncontext A95 inv: A95::allInstances()->forAll(a|a.at>=a.a94.at)\nendpackage\npackage Package_1\ncontext A96 inv: A96::allInstances()->forAll(a|a.at>=a.a95.at)\nendpackage\npackage Package_1\ncontext A97 inv: A97::allInstances()->forAll(a|a.at>=a.a96.at)\nendpackage\npackage Package_1\ncontext A98 inv: A98::allInstances()->forAll(a|a.at>=a.a97.at)\nendpackage\npackage Package_1\ncontext A99 inv: A99::allInstances()->forAll(a|a.at>=a.a98.at)\nendpackage\npackage Package_1\ncontext A100 inv: A100::allInstances()->forAll(a|a.at>=a.a99.at)\nendpackage\npackage Package_1\ncontext A1 inv: A1::allInstances()->forAll(a|a.at>=a.a100.at)\nendpackage"
    },
    {
      "name": "epcLclInstrm",
      "text": "The requirement is as follows: The Local Instrument field (PmtInf PmtTpInf LclInstrm) in the context of Payment Type Information 2 (PaymentTypeInformation2) is mandatory. This is enforced by the constraint that the size of the Local Instrument (lclInstrm) set must be greater than zero. This complies with the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3, specifically row 9, section 2.1.3 on page 7.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* The Local Instrument field (PmtInf PmtTpInf LclInstrm) is mandatory. \n   See row 9 of section 2.1.3 on pg 7 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3 */\n\ncontext PaymentTypeInformation2\ninv EPC_LclInstrm:\nself.lclInstrm->size() > 0\n\nendpackage"
    },
    {
      "name": "epcInstrdAmtValueRange",
      "text": "The requirement is as follows: In the context of Direct Debit Transaction Information1, the instructed amount (instdAmt) in the direct debit transaction information has to be between 0.01 at minimum and 999999999.99 at maximum, inclusive. This is validated by the OCL constraint EPC_InstrdAmtValueRange. This requirement is aligned with the SEPA B2B Direct Debit C2B Implementation Guidelines, particularly as outlined in row 18 on page 9.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* The instructed amount in direct debit transaction information (DrctDbTxInf instdAmt) must be 0.01 or more \n   and 999999999.99 or less. \n   See row 18 on pg 9 of SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_InstrdAmtValueRange:\ninstdAmt.value >= 0.01 and instdAmt.value <= 999999999.99\n\nendpackage"
    },
    {
      "name": "epcDrctDbtTxInfMandatoryFields",
      "text": "The requirement is as follows: \n\nWithin the Direct Debit Transaction Information (DirectDebitTransactionInformation1), four fields are mandatory. These fields include the Direct Debit Transaction (drctDbtTx), Mandate Related Information (drctDbtTx mndtRltdInf), Mandate Identification (drctDbtTx mndtRltdInf mndtId), and Date of Signature (drctDbtTx mndtRltdInf dtOfSgntr). Each of these fields must possess at least one entry, meaning their size in the context should be more than zero. This requirement aligns with rows 1-4 on page 10 of the SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Direct Debit Transaction (drctDbtTx), Mandate Related Information (drctDbtTx MndtRltdInf), Mandate\n   Identification (drctDbtTx MndtRltdInf MndtId) and Date of Signature (drctDbtTx MndtRltdInf DtOfSgntr) \n   are all mandatory fields within Direct Debit Transaction Information (drctDbtTxInf). \n   See rows 1-4 on pg 10 of SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_DrctDbTxInf_MandatoryFields:\ndrctDbtTx->size() > 0 \nand self.drctDbtTx.mndtRltdInf->size() > 0\nand self.drctDbtTx.mndtRltdInf.mndtId->size() >0 \nand self.drctDbtTx.mndtRltdInf.dtOfSgntr->size() > 0\n\nendpackage"
    },
    {
      "name": "epcAosDrctDbtTxInfUltmtDbtr",
      "text": "The requirement is as follows: In the context of DirectDebitTransactionInformation1, it is critical to ensure a particular condition concerning the ultimate debtor (ultmtDbtr). The rule is that the ultmtDbtr should either be undefined, or both the postal address (pstlAdr) and the country of residence (ctryOfRes) of the ultmtDbtr should not contain any elements. Please note that the elements PstlAdr and CtryOfRes are exclusively for the AOS community. Non-AOS member banks might reject messages that include these elements. Refer to section 1.2 of the SEPA B2B Direct Debit C2B Implementation Guidelines for additional details.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The elements PstlAdr and CtryOfRes in DrctDbtTxInf UltmtDbtr are AOS only. Instructed banks\n   that are not in the AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_AOS_DrctDbtTxInfUltmtDbtr:\nultmtDbtr.oclIsUndefined()\nor\n(ultmtDbtr.pstlAdr->size() = 0\nand\nultmtDbtr.ctryOfRes->size() = 0)\n\nendpackage"
    },
    {
      "name": "epcDrctDbtTxInfultmtcdtrIdOrdId",
      "text": "The requirements are as follows: \n\nIn the Direct Debit Transaction Information (DirectDebitTransactionInformation1), for the Ultimate Creditor Organisation Identification (ultmtCdtr.id.orgId), it can only contain one of the following sub-elements: \n\n- BIC (Bank Identifier Code) \n- IBEI (International Business Entity Identifier) \n- BEI (Business Entity Identifier) \n- EANGLN (Global Location Number) \n- USCHU (US DUNS Number) \n- DUNS (Data Universal Numbering System) \n- BkPtyId (Bank Party Identifier)\n- TaxIdNb (Tax Identification Number) \n- PrtryId (Proprietary Identification)\n\nThis is according to the row 11 on page 12 of the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* The Direct Debit Transaction Information Ultimate Creditor Organisation Identification (drctDbtTxInf \n   ultmtcdtr Id orgId) can only contain one of the subelements BIC, IBEI, BEI, EANGLN, USCHU, DUNS, BkPryId,\n   TaxIdNb, or prtryId.\n   See row 11 on pg 12 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_drctDbtTxInfultmtcdtrIdorgId:\nultmtCdtr.id.orgId->size() = 1 implies \n (ultmtCdtr.id.orgId.bIC->size() +\n  ultmtCdtr.id.orgId.iBEI->size() +\n  ultmtCdtr.id.orgId.bEI->size() +\n  ultmtCdtr.id.orgId.eANGLN->size() +\n  ultmtCdtr.id.orgId.uSCHU->size() +\n  ultmtCdtr.id.orgId.dUNS->size() +\n  ultmtCdtr.id.orgId.bkPtyId->size() +\n  ultmtCdtr.id.orgId.taxIdNb->size() +\n  ultmtCdtr.id.orgId.prtryId->size()) <= 1\n\nendpackage"
    },
    {
      "name": "Basic-UnSat-OCL-100",
      "text": "The requirements are as follows:\n\n1. For all instances of class A2, the \"at\" attribute of each instance must be greater than the \"at\" attribute of its corresponding instance in class A1.\n2. For all instances of class A3, the \"at\" attribute of each instance must be greater than the \"at\" attribute of its corresponding instance in class A2.\n3. This pattern continues up to class A100, where for all instances of A100, the \"at\" attribute of each instance must be greater than the \"at\" attribute of its corresponding instance in class A99.\n4. Finally, for all instances of class A1, the \"at\" attribute of each instance must be greater than or equal to the \"at\" attribute of its corresponding instance in class A100. \n\nIn other words, each class from A2 to A100 must have an \"at\" value greater than its predecessor, with the exception of A1, which must have an \"at\" value greater than or equal to that of A100.",
      "label": "package Package_1\ncontext A2 inv: A2::allInstances()->forAll(a|a.at>a.a1.at)\nendpackage\npackage Package_1\ncontext A3 inv: A3::allInstances()->forAll(a|a.at>a.a2.at)\nendpackage\npackage Package_1\ncontext A4 inv: A4::allInstances()->forAll(a|a.at>a.a3.at)\nendpackage\npackage Package_1\ncontext A5 inv: A5::allInstances()->forAll(a|a.at>a.a4.at)\nendpackage\npackage Package_1\ncontext A6 inv: A6::allInstances()->forAll(a|a.at>a.a5.at)\nendpackage\npackage Package_1\ncontext A7 inv: A7::allInstances()->forAll(a|a.at>a.a6.at)\nendpackage\npackage Package_1\ncontext A8 inv: A8::allInstances()->forAll(a|a.at>a.a7.at)\nendpackage\npackage Package_1\ncontext A9 inv: A9::allInstances()->forAll(a|a.at>a.a8.at)\nendpackage\npackage Package_1\ncontext A10 inv: A10::allInstances()->forAll(a|a.at>a.a9.at)\nendpackage\npackage Package_1\ncontext A11 inv: A11::allInstances()->forAll(a|a.at>a.a10.at)\nendpackage\npackage Package_1\ncontext A12 inv: A12::allInstances()->forAll(a|a.at>a.a11.at)\nendpackage\npackage Package_1\ncontext A13 inv: A13::allInstances()->forAll(a|a.at>a.a12.at)\nendpackage\npackage Package_1\ncontext A14 inv: A14::allInstances()->forAll(a|a.at>a.a13.at)\nendpackage\npackage Package_1\ncontext A15 inv: A15::allInstances()->forAll(a|a.at>a.a14.at)\nendpackage\npackage Package_1\ncontext A16 inv: A16::allInstances()->forAll(a|a.at>a.a15.at)\nendpackage\npackage Package_1\ncontext A17 inv: A17::allInstances()->forAll(a|a.at>a.a16.at)\nendpackage\npackage Package_1\ncontext A18 inv: A18::allInstances()->forAll(a|a.at>a.a17.at)\nendpackage\npackage Package_1\ncontext A19 inv: A19::allInstances()->forAll(a|a.at>a.a18.at)\nendpackage\npackage Package_1\ncontext A20 inv: A20::allInstances()->forAll(a|a.at>a.a19.at)\nendpackage\npackage Package_1\ncontext A21 inv: A21::allInstances()->forAll(a|a.at>a.a20.at)\nendpackage\npackage Package_1\ncontext A22 inv: A22::allInstances()->forAll(a|a.at>a.a21.at)\nendpackage\npackage Package_1\ncontext A23 inv: A23::allInstances()->forAll(a|a.at>a.a22.at)\nendpackage\npackage Package_1\ncontext A24 inv: A24::allInstances()->forAll(a|a.at>a.a23.at)\nendpackage\npackage Package_1\ncontext A25 inv: A25::allInstances()->forAll(a|a.at>a.a24.at)\nendpackage\npackage Package_1\ncontext A26 inv: A26::allInstances()->forAll(a|a.at>a.a25.at)\nendpackage\npackage Package_1\ncontext A27 inv: A27::allInstances()->forAll(a|a.at>a.a26.at)\nendpackage\npackage Package_1\ncontext A28 inv: A28::allInstances()->forAll(a|a.at>a.a27.at)\nendpackage\npackage Package_1\ncontext A29 inv: A29::allInstances()->forAll(a|a.at>a.a28.at)\nendpackage\npackage Package_1\ncontext A30 inv: A30::allInstances()->forAll(a|a.at>a.a29.at)\nendpackage\npackage Package_1\ncontext A31 inv: A31::allInstances()->forAll(a|a.at>a.a30.at)\nendpackage\npackage Package_1\ncontext A32 inv: A32::allInstances()->forAll(a|a.at>a.a31.at)\nendpackage\npackage Package_1\ncontext A33 inv: A33::allInstances()->forAll(a|a.at>a.a32.at)\nendpackage\npackage Package_1\ncontext A34 inv: A34::allInstances()->forAll(a|a.at>a.a33.at)\nendpackage\npackage Package_1\ncontext A35 inv: A35::allInstances()->forAll(a|a.at>a.a34.at)\nendpackage\npackage Package_1\ncontext A36 inv: A36::allInstances()->forAll(a|a.at>a.a35.at)\nendpackage\npackage Package_1\ncontext A37 inv: A37::allInstances()->forAll(a|a.at>a.a36.at)\nendpackage\npackage Package_1\ncontext A38 inv: A38::allInstances()->forAll(a|a.at>a.a37.at)\nendpackage\npackage Package_1\ncontext A39 inv: A39::allInstances()->forAll(a|a.at>a.a38.at)\nendpackage\npackage Package_1\ncontext A40 inv: A40::allInstances()->forAll(a|a.at>a.a39.at)\nendpackage\npackage Package_1\ncontext A41 inv: A41::allInstances()->forAll(a|a.at>a.a40.at)\nendpackage\npackage Package_1\ncontext A42 inv: A42::allInstances()->forAll(a|a.at>a.a41.at)\nendpackage\npackage Package_1\ncontext A43 inv: A43::allInstances()->forAll(a|a.at>a.a42.at)\nendpackage\npackage Package_1\ncontext A44 inv: A44::allInstances()->forAll(a|a.at>a.a43.at)\nendpackage\npackage Package_1\ncontext A45 inv: A45::allInstances()->forAll(a|a.at>a.a44.at)\nendpackage\npackage Package_1\ncontext A46 inv: A46::allInstances()->forAll(a|a.at>a.a45.at)\nendpackage\npackage Package_1\ncontext A47 inv: A47::allInstances()->forAll(a|a.at>a.a46.at)\nendpackage\npackage Package_1\ncontext A48 inv: A48::allInstances()->forAll(a|a.at>a.a47.at)\nendpackage\npackage Package_1\ncontext A49 inv: A49::allInstances()->forAll(a|a.at>a.a48.at)\nendpackage\npackage Package_1\ncontext A50 inv: A50::allInstances()->forAll(a|a.at>a.a49.at)\nendpackage\npackage Package_1\ncontext A51 inv: A51::allInstances()->forAll(a|a.at>a.a50.at)\nendpackage\npackage Package_1\ncontext A52 inv: A52::allInstances()->forAll(a|a.at>a.a51.at)\nendpackage\npackage Package_1\ncontext A53 inv: A53::allInstances()->forAll(a|a.at>a.a52.at)\nendpackage\npackage Package_1\ncontext A54 inv: A54::allInstances()->forAll(a|a.at>a.a53.at)\nendpackage\npackage Package_1\ncontext A55 inv: A55::allInstances()->forAll(a|a.at>a.a54.at)\nendpackage\npackage Package_1\ncontext A56 inv: A56::allInstances()->forAll(a|a.at>a.a55.at)\nendpackage\npackage Package_1\ncontext A57 inv: A57::allInstances()->forAll(a|a.at>a.a56.at)\nendpackage\npackage Package_1\ncontext A58 inv: A58::allInstances()->forAll(a|a.at>a.a57.at)\nendpackage\npackage Package_1\ncontext A59 inv: A59::allInstances()->forAll(a|a.at>a.a58.at)\nendpackage\npackage Package_1\ncontext A60 inv: A60::allInstances()->forAll(a|a.at>a.a59.at)\nendpackage\npackage Package_1\ncontext A61 inv: A61::allInstances()->forAll(a|a.at>a.a60.at)\nendpackage\npackage Package_1\ncontext A62 inv: A62::allInstances()->forAll(a|a.at>a.a61.at)\nendpackage\npackage Package_1\ncontext A63 inv: A63::allInstances()->forAll(a|a.at>a.a62.at)\nendpackage\npackage Package_1\ncontext A64 inv: A64::allInstances()->forAll(a|a.at>a.a63.at)\nendpackage\npackage Package_1\ncontext A65 inv: A65::allInstances()->forAll(a|a.at>a.a64.at)\nendpackage\npackage Package_1\ncontext A66 inv: A66::allInstances()->forAll(a|a.at>a.a65.at)\nendpackage\npackage Package_1\ncontext A67 inv: A67::allInstances()->forAll(a|a.at>a.a66.at)\nendpackage\npackage Package_1\ncontext A68 inv: A68::allInstances()->forAll(a|a.at>a.a67.at)\nendpackage\npackage Package_1\ncontext A69 inv: A69::allInstances()->forAll(a|a.at>a.a68.at)\nendpackage\npackage Package_1\ncontext A70 inv: A70::allInstances()->forAll(a|a.at>a.a69.at)\nendpackage\npackage Package_1\ncontext A71 inv: A71::allInstances()->forAll(a|a.at>a.a70.at)\nendpackage\npackage Package_1\ncontext A72 inv: A72::allInstances()->forAll(a|a.at>a.a71.at)\nendpackage\npackage Package_1\ncontext A73 inv: A73::allInstances()->forAll(a|a.at>a.a72.at)\nendpackage\npackage Package_1\ncontext A74 inv: A74::allInstances()->forAll(a|a.at>a.a73.at)\nendpackage\npackage Package_1\ncontext A75 inv: A75::allInstances()->forAll(a|a.at>a.a74.at)\nendpackage\npackage Package_1\ncontext A76 inv: A76::allInstances()->forAll(a|a.at>a.a75.at)\nendpackage\npackage Package_1\ncontext A77 inv: A77::allInstances()->forAll(a|a.at>a.a76.at)\nendpackage\npackage Package_1\ncontext A78 inv: A78::allInstances()->forAll(a|a.at>a.a77.at)\nendpackage\npackage Package_1\ncontext A79 inv: A79::allInstances()->forAll(a|a.at>a.a78.at)\nendpackage\npackage Package_1\ncontext A80 inv: A80::allInstances()->forAll(a|a.at>a.a79.at)\nendpackage\npackage Package_1\ncontext A81 inv: A81::allInstances()->forAll(a|a.at>a.a80.at)\nendpackage\npackage Package_1\ncontext A82 inv: A82::allInstances()->forAll(a|a.at>a.a81.at)\nendpackage\npackage Package_1\ncontext A83 inv: A83::allInstances()->forAll(a|a.at>a.a82.at)\nendpackage\npackage Package_1\ncontext A84 inv: A84::allInstances()->forAll(a|a.at>a.a83.at)\nendpackage\npackage Package_1\ncontext A85 inv: A85::allInstances()->forAll(a|a.at>a.a84.at)\nendpackage\npackage Package_1\ncontext A86 inv: A86::allInstances()->forAll(a|a.at>a.a85.at)\nendpackage\npackage Package_1\ncontext A87 inv: A87::allInstances()->forAll(a|a.at>a.a86.at)\nendpackage\npackage Package_1\ncontext A88 inv: A88::allInstances()->forAll(a|a.at>a.a87.at)\nendpackage\npackage Package_1\ncontext A89 inv: A89::allInstances()->forAll(a|a.at>a.a88.at)\nendpackage\npackage Package_1\ncontext A90 inv: A90::allInstances()->forAll(a|a.at>a.a89.at)\nendpackage\npackage Package_1\ncontext A91 inv: A91::allInstances()->forAll(a|a.at>a.a90.at)\nendpackage\npackage Package_1\ncontext A92 inv: A92::allInstances()->forAll(a|a.at>a.a91.at)\nendpackage\npackage Package_1\ncontext A93 inv: A93::allInstances()->forAll(a|a.at>a.a92.at)\nendpackage\npackage Package_1\ncontext A94 inv: A94::allInstances()->forAll(a|a.at>a.a93.at)\nendpackage\npackage Package_1\ncontext A95 inv: A95::allInstances()->forAll(a|a.at>a.a94.at)\nendpackage\npackage Package_1\ncontext A96 inv: A96::allInstances()->forAll(a|a.at>a.a95.at)\nendpackage\npackage Package_1\ncontext A97 inv: A97::allInstances()->forAll(a|a.at>a.a96.at)\nendpackage\npackage Package_1\ncontext A98 inv: A98::allInstances()->forAll(a|a.at>a.a97.at)\nendpackage\npackage Package_1\ncontext A99 inv: A99::allInstances()->forAll(a|a.at>a.a98.at)\nendpackage\npackage Package_1\ncontext A100 inv: A100::allInstances()->forAll(a|a.at>a.a99.at)\nendpackage\npackage Package_1\ncontext A1 inv: A1::allInstances()->forAll(a|a.at>=a.a100.at)\nendpackage"
    },
    {
      "name": "epcRmtInfstrduStrd",
      "text": "The requirement is as follows: within the context of RemittanceInformation1 in package 'isoStdIso20022TechXsdPain00800101', only one instance of 'unstructured' is allowed. This stipulation is in accordance with the SEPA B2B Direct Debit C2B Implementation Guidelines (specifically, row 6 on page 14).",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Only one occurrence of 'unstructured' is allowed.\n   See row 6 on pg 14 of SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext RemittanceInformation1\ninv EPC_rmtInfustrd:\nself.ustrd->size() = 1\n\nendpackage"
    },
    {
      "name": "grouping2Rule",
      "text": "The requirements are as follows:\n\nAssuming the presence of a model known as 'pain.008.001.01corrected.xsd', under the package 'isoStdIso20022TechXsdPain00800101' it is stipulated that if a GroupHeader/Grouping exists and is marked as 'SNGL', then every instance of 'PaymentInformation' must have one and only one occurrence of PaymentInformation/DirectDebitTransactionInformation. This requirement can be found in page 79 of Payments_Standards-Initiation_updated.pdf. Specifically, in the context of the 'Pain00800101' model, should the grouping within the group header equal 'SNGL', then all instances of 'PaymentInformation', identified as 'a', should have the 'DirectDebitTransactionInformation' size equalling one.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* If GroupHeader/Grouping is present and equals SNGL, then each occurrence of PaymentInformation must contain \n   one and only one occurrence of PaymentInformation/DirectDebitTransactionInformation.\n   Ref. p.79 of Payments_Standards-Initiation_updated.pdf.*/\n\ncontext Pain00800101\ninv Grouping2Rule:\ngrpHdr.grpg='SNGL' implies self.pmtInf->forAll(a | a.drctDbtTxInf->size()=1)\n\nendpackage"
    },
    {
      "name": "epcSvcLvlCd",
      "text": "The requirements are as follows: For the context of Service Level Code in the package named 'isoStdIso20022TechXsdPain00800101', it is specified that the value for the Service Level Code must be set to 'SEPA'. This requirement is mentioned in row 7 of section 2.1.3 of 'Payment Information' which is located on page 7 of 'SEPA B2B Direct Debit C2B Implementation Guidelines' document. This policy is encapsulated in the invariant 'EPC_svcLvlCd'.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* The value for Service Level Code (PmtInf pmtTpInf svcLvl Cd) must be set to 'SEPA'. \n   See row 7 of section 2.1.3 of Payment Information pg 7 of SEPA B2B Direct Debit C2B \n   Implementation Guidelines document. */\n\ncontext ServiceLevel3Choice\ninv EPC_svcLvlCd:\ncd = 'SEPA'\n\nendpackage"
    },
    {
      "name": "epcDbtrAgtfinInstnId",
      "text": "The requirement is as follows: \nIn the Direct Debit Transaction Information (DirectDebitTransactionInformation1), for the Debtor's Agent (dbtrAgt finInstnId), only the Business Identifier Code (BIC) is allowed whereas the Clearing System Member Id (clrSysMmbId), name and address (nmAndAdr), proprietary id (prtryId), combined id (cmbndId), and the branch id (brnchId) should not exist (i.e., their count is zero). This rule is in accordance with the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3 (referencing row 14 on page 12).",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* For Debtor Agent in Direct Debit Transaction Information (drctDbtTxInf dbtrAgt finInstnId), only BIC is \n   allowed. \n   Ref row 14 on pg 12 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_dbtrAgtfinInstnId:\ndbtrAgt.finInstnId.clrSysMmbId->size() = 0 and \ndbtrAgt.finInstnId.nmAndAdr->size() =0 and \ndbtrAgt.finInstnId.prtryId->size() = 0 and \ndbtrAgt.finInstnId.cmbndId->size() = 0 and\ndbtrAgt.brnchId->size() = 0\n\nendpackage"
    },
    {
      "name": "mondex",
      "text": "The requirements are as follows:\n\n1. For an object of the AbWorld type, there must be exactly one predecessor world (PredWorld) and one successor world (SuccWorld) existing.\n\n2. There should be at most one Initial World instance in the system at any point, i.e. the number of instances of the AbInitWorld class should be less than 2.\n\n3. An object of the AbEndWorld type should have exactly one predecessor world (PredWorld) and no successor world should exist.\n\n4. A Coin must belong to a Purse. This is defined in each World object, there would be at least one purse existing that includes the coin either in its balance or its lost coins.\n\n5. Regarding the balance and lost coins in a Purse, there should not be any coin sharing between two different purses in two distinct worlds. It means that if two purses are different, their corresponding worlds should also be different.",
      "label": "package model\ncontext AbWorld inv PredWorldAndSuccWorldExisting :\n    self.oclIsTypeOf( AbWorld ) implies\n      ( pred->size() = 1 and\n        succ->size() = 1 )\nendpackage\n\npackage model\ncontext AbWorld inv AtMostOneInitialWorld :\n    AbInitWorld.allInstances->size() < 2\n\nendpackage\n\npackage model\ncontext AbEndWorld inv PredWorldExisting :\n    pred->size() = 1\n  inv NoSuccWorldExisting :\n    succ->isEmpty()\nendpackage\n\npackage model\ncontext Coin inv BelongsToPurse :\n    AbWorld.allInstances->forAll( world |\n      world.abAuthPurse->exists( purse |\n        ( purse.coinBalance->union( purse.coinLost ) )->includes( self ) ) )\n  inv NoCoinSharing :\n    ( purseBalance->union( purseLost ) )->forAll( purse1, purse2 |\n        purse1 <> purse2 implies \n          purse1.abWorld <> purse2.abWorld )\nendpackage"
    },
    {
      "name": "epcDrctDbtTxInfultmtCdtrIdprvtId",
      "text": "The requirements are as follows: In the context of Direct Debit Transaction Information ('DirectDebitTransactionInformation1'), only one instance of Private Identification for the Ultimate Creditor ('ultmtCdtr Id prvtId') may be present. The 'Ultimate Creditor' is either undefined or the size of the 'private identification' of 'Ultimate Creditor' must be less than or equal to one. This is based on the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3, specifically referenced to row 12 on page 12.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Only one occurrence of Private Identification for Direct Debit Transaction Information Ultimate Creditor \n  (DrctDbTxInf ultmtCdtr Id prvtId) may be present.\n   Ref row 12 on pg 12 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_drctDbtTxInfultmtCdtrIdprvtId:\nultmtCdtr.oclIsUndefined()\nor\nultmtCdtr.id.prvtId->size() <=1\n\nendpackage"
    },
    {
      "name": "epcAosCdtrSchmeId",
      "text": "The requirements are as follows:\n\nIn the context of DirectDebitTransaction1, ensure that the creditor's schema ID (cdtrSchmeId) is either undefined or it is defined in such a way that the size of its name (nm), postal address (pstlAdr), organization ID (orgId), and country of residence (ctryOfRes) are all equal to 0. This requirement is based on the fact that the elements Nm, PstlAdr, Id OrgId, and CtryOfRes in DrctDbtTx CdtrSchmeId are only for AOS (Advanced Ordering System) community members. Instructed banks that are not in the AOS community may reject messages containing these elements. This requirement is in line with section 1.2 of the SEPA (Single Euro Payments Area) B2B (Business-to-Business) Direct Debit C2B (Customer-to-Business) Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The elements Nm, PstlAdr, Id OrgId and CtryOfRes in DrctDbtTx CdtrSchmeId are AOS only.\n   Instructed banks that are not in the AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransaction1\ninv EPC_AOS_CdtrSchmeId:\ncdtrSchmeId.oclIsUndefined()\nor\n(cdtrSchmeId.nm->size() = 0 \nand \ncdtrSchmeId.pstlAdr->size() = 0 \nand \ncdtrSchmeId.id.orgId->size() = 0 \nand \ncdtrSchmeId.ctryOfRes->size() = 0)\n\nendpackage"
    },
    {
      "name": "epcOrgnlDbtrAcctId",
      "text": "The requirement is as follows:\n\nIn the context of \"MandateRelatedInformation1\", for the Original Debtor Accounts in mandate related information amendment details (amdmntInfDtls OrgnldbtrAcct Id), only International Bank Account Number (IBAN) is allowed. This means, any details associated with BBAN, proprietary account, universal payment identification code (uPIC), type of account (tp), currency of the account (ccy), and name of the account (nm) should either be undefined or if they are defined, their size should be 0, meaning they should not carry any information.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* For Original Debtor Accounts in mandate related information amendment information (mndtRltdInf amdmntInfDtls\n   OrgnldbtrAcct Id), only IBAN is allowed. \n   See row 5 of page 11 SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext MandateRelatedInformation1\ninv EPC_orgnlDbtrAcctId:\namdmntInfDtls.oclIsUndefined()\nor\n(amdmntInfDtls.orgnlDbtrAcct.id.bBAN->size() = 0 and \namdmntInfDtls.orgnlDbtrAcct.id.prtryAcct->size() = 0 and \namdmntInfDtls.orgnlDbtrAcct.id.uPIC->size() = 0 and \namdmntInfDtls.orgnlDbtrAcct.tp->size() = 0 and\namdmntInfDtls.orgnlDbtrAcct.ccy->size() = 0 and \namdmntInfDtls.orgnlDbtrAcct.nm->size() = 0)\n\nendpackage"
    },
    {
      "name": "epcCdtrAcctId",
      "text": "The requirement is as follows: \n\nFor the Creditor Account Id (referred to as \"PmtInf CdtrAcct Id\" in code) in the \"PaymentInstructionInformation2\" context, only the use of IBAN (International Bank Account Number) is permitted. This means that other types of account identification methods such as Basic Bank Account Number (BBAN), proprietary account characteristics (prtryAcct), or Universal Payment Identification Code (UPIC) should not be used, as indicated by their respective sizes set to 0 in the code. This requirement is in line with the rules stipulated in row 18 on page 8 of the SEPA (Single Euro Payments Area) Business to Business (B2B) Direct Debit Customer to Business (C2B) Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* For Creditor Account Id (PmtInf CdtrAcct Id), only IBAN is allowed. \n   See row 18 on page 8 of SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext PaymentInstructionInformation2\ninv EPC_CdtrAcctId:\ncdtrAcct.id.bBAN->size() = 0 and cdtrAcct.id.prtryAcct->size() = 0 and cdtrAcct.id.uPIC->size() = 0\n\nendpackage"
    },
    {
      "name": "epcCdtrSchemeId",
      "text": "The requirement is as follows: within a 'Payment Instruction Information 2' object, it is recommended that all transactions within the same 'Payment Information' block have the same 'Creditor Scheme Identification'. This is only checking the 'Other ID' within the 'Private ID' as it is the only identification that can be utilized in 'pacs3'. In case if this is not enough, 'EPC_cdtrSchmeId_UNUSED_FULL' rule can be enabled. This rule applies to each pair (a, b) of 'Creditor Scheme Identification' within the 'Direct Debit Transaction Info'. If a or b is undefined, the rule is satisfied. If both are defined, they both must have the same 'Other ID' and 'ID Type' within a 'Private ID'. This rule references page 11, row 14 of the SEPA C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* It is recommended that all transactions within the same 'Payment Information' block have the same\n   'Creditor Scheme Identification'. Note: this rule only checks PrvtId OthrId since this the only Id \n   that can be used in pacs3. Rule EPC_cdtrSchmeId_UNUSED_FULL can be enabled if this is inadequate.\n   Ref pg 11, row 14, SEPA C2B Implementation Guidelines. */\n\ncontext PaymentInstructionInformation2\ninv EPC_cdtrSchmeId:\ndrctDbtTxInf.drctDbtTx.cdtrSchmeId->forAll(a, b | \n  a.oclIsUndefined() or b.oclIsUndefined() or\n  (a.id.prvtId.othrId.id = b.id.prvtId.othrId.id and\n  a.id.prvtId.othrId.idTp = b.id.prvtId.othrId.idTp))\n\nendpackage"
    },
    {
      "name": "ultimateCreditorIndrctDbtTxInfGuideline",
      "text": "The requirement is as follows:\n\nIn the context of PaymentInstructionInformation2, a guideline stipulates that the \"UltimateCreditor\" field in the Direct Debit Information might only be present if it differs from the \"Creditor\" field. Note that only one instance of \"prvtId\" is allowed in \"ultmtCdtr\" and \"cdtr\".\n\nThis means that for each direct debit transaction, if the \"Ultimate Creditor's\" name, identification numbers, and other defined fields are present, they should differ from the corresponding fields of the \"Creditor\". The fields to be checked and differ include but are not limited to the name, Bank Identifier Code (BIC), Issuer Identification Number (IIN), Employer Identification Number (EIN), Electronic Data Interchange Party Identifier (EDIPartyIdentifier), Universal Standard Products and Services Classification (USPS), Data Universal Numbering System (DUNS), Bank Party Identification, Tax Identification Number, Proprietary Identification, and various private identifications such as driver’s license number, customer number, social security number, alien registration number, passport number, identification card number, employee identification number, and other identification.\n\nThe basic principle is that the presence of a certain identifier in the creditor and ultimate creditor fields implies that the value of that identifier must not be the same in both fields. The one exception being the \"other identification number\" (othrId), where either the identifier or identifier type not matching is sufficient.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Guideline - UltimateCreditor in the Direct Debit Information may only be present if different from \n   Creditor. Note: Only one occurrence of prvtId is allowed in ultmtCdtr and cdtr.\n   Ref p.94 of Payments_Standards-Initiated_updated.pdf. */\n\ncontext PaymentInstructionInformation2\ninv UltimateCreditorIndrctDbtTxInfGuideline:\t\t\t\ndrctDbtTxInf->forAll(a | \n\n(a.ultmtCdtr.nm->size() = 1 implies \n                a.ultmtCdtr.nm <> cdtr.nm) and\n\n((a.ultmtCdtr.id.orgId.bIC->size() = 1 and cdtr.id.orgId.bIC->size() = 1) implies\n    a.ultmtCdtr.id.orgId.bIC <> cdtr.id.orgId.bIC) and\n\n((a.ultmtCdtr.id.orgId.iBEI->size() = 1 and cdtr.id.orgId.iBEI->size() = 1) implies\n    a.ultmtCdtr.id.orgId.iBEI <> cdtr.id.orgId.iBEI) and\n\n((a.ultmtCdtr.id.orgId.bEI->size() = 1 and cdtr.id.orgId.bEI->size() = 1) implies\n    a.ultmtCdtr.id.orgId.bEI <> cdtr.id.orgId.bEI) and \n\n((a.ultmtCdtr.id.orgId.eANGLN->size() = 1 and cdtr.id.orgId.eANGLN->size() = 1) implies\n    a.ultmtCdtr.id.orgId.eANGLN <> cdtr.id.orgId.eANGLN) and\n\n((a.ultmtCdtr.id.orgId.uSCHU->size() = 1 and cdtr.id.orgId.uSCHU->size() = 1) implies\n    a.ultmtCdtr.id.orgId.uSCHU <> cdtr.id.orgId.uSCHU) and\n\n((a.ultmtCdtr.id.orgId.dUNS->size() = 1 and cdtr.id.orgId.dUNS->size() = 1) implies\n    a.ultmtCdtr.id.orgId.dUNS <> cdtr.id.orgId.dUNS) and\n\n((a.ultmtCdtr.id.orgId.bkPtyId->size() = 1 and cdtr.id.orgId.bkPtyId->size() = 1) implies\n    a.ultmtCdtr.id.orgId.bkPtyId <> cdtr.id.orgId.bkPtyId) and\n\n((a.ultmtCdtr.id.orgId.taxIdNb->size() = 1 and cdtr.id.orgId.taxIdNb->size() = 1) implies\n    a.ultmtCdtr.id.orgId.taxIdNb <> cdtr.id.orgId.taxIdNb) and\n\n((a.ultmtCdtr.id.orgId.prtryId.id->size() = 1 and cdtr.id.orgId.prtryId.id->size() = 1) implies\n    a.ultmtCdtr.id.orgId.prtryId.id <> cdtr.id.orgId.prtryId.id) and \n\n((a.ultmtCdtr.id.prvtId.drvrsLicNb->size() = 1 and cdtr.id.prvtId.drvrsLicNb->size() = 1) implies\n    a.ultmtCdtr.id.prvtId.drvrsLicNb <> cdtr.id.prvtId.drvrsLicNb) and\n\n((a.ultmtCdtr.id.prvtId.cstmrNb->size() = 1 and cdtr.id.prvtId.cstmrNb->size() = 1) implies\n    a.ultmtCdtr.id.prvtId.cstmrNb <> cdtr.id.prvtId.cstmrNb) and\n\n((a.ultmtCdtr.id.prvtId.sclSctyNb->size() = 1 and cdtr.id.prvtId.sclSctyNb->size() = 1) implies\n    a.ultmtCdtr.id.prvtId.sclSctyNb <> cdtr.id.prvtId.sclSctyNb) and\n\n((a.ultmtCdtr.id.prvtId.alnRegnNb->size() = 1 and cdtr.id.prvtId.alnRegnNb->size() = 1) implies\n    a.ultmtCdtr.id.prvtId.alnRegnNb <> cdtr.id.prvtId.alnRegnNb) and \n\n((a.ultmtCdtr.id.prvtId.psptNb->size() = 1 and cdtr.id.prvtId.psptNb->size() = 1) implies\n    a.ultmtCdtr.id.prvtId.psptNb <> cdtr.id.prvtId.psptNb) and \n\n((a.ultmtCdtr.id.prvtId.taxIdNb->size() = 1 and cdtr.id.prvtId.taxIdNb->size() = 1) implies\n    a.ultmtCdtr.id.prvtId.taxIdNb <> cdtr.id.prvtId.taxIdNb) and\n\n((a.ultmtCdtr.id.prvtId.idntyCardNb->size() = 1 and cdtr.id.prvtId.idntyCardNb->size() = 1) implies\n    a.ultmtCdtr.id.prvtId.idntyCardNb <> cdtr.id.prvtId.idntyCardNb) and\n\n((a.ultmtCdtr.id.prvtId.mplyrIdNb->size() = 1 and cdtr.id.prvtId.mplyrIdNb->size() = 1) implies\n    a.ultmtCdtr.id.prvtId.mplyrIdNb <> cdtr.id.prvtId.mplyrIdNb) and \n\n((a.ultmtCdtr.id.prvtId.othrId->size() = 1 and cdtr.id.prvtId.othrId->size() = 1) implies\n    (a.ultmtCdtr.id.prvtId.othrId.id <> cdtr.id.prvtId.othrId.id or\n    a.ultmtCdtr.id.prvtId.othrId.idTp <> cdtr.id.prvtId.othrId.idTp))\n)\n\t\t\t\nendpackage"
    },
    {
      "name": "amendmentIndicatorRule",
      "text": "The requirements are as follows: Within the MandateRelatedInformation1 context of the isoStdIso20022TechXsdPain00800101 package, if the 'AmendmentIndicator' is true, then 'AmendmentInformationDetails' must be present, meaning it contains amended mandate information and its size must be greater than 0. However, if the 'AmendmentIndicator' is false, then 'AmendmentInformationDetails' is not allowed, meaning its size must be equal to 0.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* If AmendmentIndicator is true, then AmendmentInformationDetails must be present, \n   with amended mandate information. If AmendmentIndicator is false, then \n   AmendmentInformationDetails is not allowed. \n   Ref. p.99 of Payments_Standards-Initiation_updated.pdf. */\n\ncontext MandateRelatedInformation1\ninv AmendmentIndicatorRule:\n(amdmntInd = true implies amdmntInfDtls->size() > 0) \nand\n(amdmntInd = false implies amdmntInfDtls->size() = 0)\n\nendpackage"
    },
    {
      "name": "Basic-UnSat-OCL-5",
      "text": "The requirements are as follows:\n\n1. For every instance of A2, the attribute 'at' must be greater than the attribute 'at' of its associated A1 instance.\n2. For every instance of A3, the attribute 'at' must be greater than the attribute 'at' of its associated A2 instance.\n3. For every instance of A4, the attribute 'at' must be greater than the attribute 'at' of its associated A3 instance.\n4. For every instance of A5, the attribute 'at' must be greater than the attribute 'at' of its associated A4 instance.\n5. For every instance of A1, the attribute 'at' must be greater than or equal to the attribute 'at' of its associated A5 instance.\n\nPlease note that these requirements come under the same package named 'Package_1'.",
      "label": "package Package_1\ncontext A2 inv: A2::allInstances()->forAll(a|a.at>a.a1.at)\nendpackage\npackage Package_1\ncontext A3 inv: A3::allInstances()->forAll(a|a.at>a.a2.at)\nendpackage\npackage Package_1\ncontext A4 inv: A4::allInstances()->forAll(a|a.at>a.a3.at)\nendpackage\npackage Package_1\ncontext A5 inv: A5::allInstances()->forAll(a|a.at>a.a4.at)\nendpackage\npackage Package_1\ncontext A1 inv: A1::allInstances()->forAll(a|a.at>=a.a5.at)\nendpackage"
    },
    {
      "name": "chargesAccountRule",
      "text": "The requirement is as follows: In the context of PaymentInstructionInformation2, if the ChargesAccountAgent (chrgsAcctAgt) is present (or, its size is greater than 0), then the ChargesAccount (chrgsAcct) must also be present (or, its size must be greater than 0), as per the reference p.86 of the Payments_Standards-Initiation_updated.pdf document.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* If ChargesAccountAgent is present, then ChargesAccount must be present.\n   Ref. p.86 of Payments_Standards-Initiation_updated.pdf. */\n\ncontext PaymentInstructionInformation2\ninv ChargesAccountRule:\nchrgsAcctAgt->size() > 0 implies chrgsAcct->size() > 0\n\nendpackage"
    },
    {
      "name": "eShop.uml",
      "text": "The requirements are as follows:\n\n1. For 'Product' class in the 'eShop' package, the stock of any instance of the product should always be equal to or greater than 5.\n\n2. As for the 'GoldCustomer' class, the requirement is that the sum of the amounts of all paid sales by any instance of GoldCustomer should exceed 10.\n\n3. Concerning the 'Portal' class, there's a constraint on the 'removeGoldCategory' operation, where a customer instance can only be removed from the GoldCustomer category if it is indeed of GoldCustomer type and if it has no sales.\n\n4. For the 'Customer' class, the creation of a new customer is constrained. Specifically, the new customer result needs to be identified as new, and the name and 'portal' attributes of this newly created customer should be equal to the input parameters ‘name’ and ‘p’. In this case, no specific precondition is defined, so any instance can create a new customer.\n\n5. Finally, for the 'Sale' class, a pre-condition for the 'addSaleLine' operation is that there has to be a positive stock of the given product. After conducting this operation, the 'SaleLine' result will be identified as a new instance with its attributes being set appropriately. It's connected to the initial 'Sale' and 'Product' instances. Meanwhile, the stock of the product is decreased by the sale quantity, and the amount attribute of the instance of the 'Sale' class is increased by the multiplication of the quantity and price of the product.",
      "label": "package eShop\n\ncontext Product inv minStock: Product::allInstances()->forAll(p|p.stock>=5)\n\ncontext GoldCustomer inv salesAmount: GoldCustomer::allInstances()->forAll(g| g.sale->select(s| s.paid).amount->sum()>10)\n\ncontext Portal::removeGoldCategory(c:Customer):\n\tpre: c.oclIsTypeOf(GoldCustomer) and c.sale->isEmpty()\n\tpost: not c.oclIsTypeOf(GoldCustomer)\n\ncontext Customer::newCustomer(name:Integer, p:Portal):Customer\n    pre: true\n    post: result.oclIsNew() and result.name=name and result.portal=p\n\ncontext Sale::addSaleLine(p:Product, quantity:Integer):SaleLine\n   pre: p.stock > 0\n   post: result.oclIsNew() and result.sale=self and result.product=p and result.quantity=quantity and\n\tp.stock=p.stock@pre-quantity and self.amount=self.amount@pre + quantity*p.price\n\nendpackage"
    },
    {
      "name": "epcMndtRltdInfOrgnlCdtrSchemIdPrvitIdOnlyOnce",
      "text": "The requirement as follows: For each Direct Debit Transaction, if 'Mandated Related Information' and 'Amendment Information Details' under it are defined, then, every 'Private Identification' under 'Original Creditor Scheme Identification' within the 'Amendment Information Details' should specify 'SEPA' as the 'Other Identification' type. This requirement is in alignment with row 13 of page 10 SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* 'Identification Type'  under 'Other Identification' for Mandated Related Information Amendment Information\n   Original Creditor Scheme Private Ids (mndtRltdInf amdmntInfDtls OrgnlcdtrSchmeId Id prvtId) must specify\n   'SEPA'.\n   See row 13 of page 10 SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransaction1\ninv EPC_mndtRltdInf_OrgnlcdtrSchmeId_prvtId_SEPA:\nself.mndtRltdInf.oclIsUndefined()\nor\nself.mndtRltdInf.amdmntInfDtls.oclIsUndefined()\nor\nself.mndtRltdInf.amdmntInfDtls.orgnlCdtrSchmeId.id.prvtId->forAll(a | a.othrId.idTp='SEPA')\n\nendpackage"
    },
    {
      "name": "epcInstdAmtEURO",
      "text": "The requirement is as follows:\n\nIn the context of the 'DirectDebitTransactionInformation1' package within the 'isoStdIso20022TechXsdPain00800101' model, there is a constraint specified as 'EPC_InstdAmtEURO'. This constraint ensures that the currency of the instructed amount in direct debit transaction information (identified as 'instdAmt.ccy') should be set to EUR (Euro). This stipulation is based on row 18 on page 9 of the SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* The instructed amount currency in direct debit transaction information (DbctDbTxInf InstdAmt Ccy) must be \n   set to EUR.\n   See row 18 on pg 9 of SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_InstdAmtEURO:\ninstdAmt.ccy = 'EUR'\n\nendpackage"
    },
    {
      "name": "epcChargeBearer",
      "text": "The requirement is as follows: In the context of Direct Debit Transaction Information (DirectDebitTransactionInformation1), it is recommended that Charge Bearer (chrgBr) should not be specified as part of Direct Debit Transaction Information (DrctDbTxInf). Instead, it should be specified as part of Payment Information (PmtInf). This is according to row 10 of section 2.1.3 of Payment Information on page 9 of the SEPA B2B Direct Debit C2B Implementation Guidelines document. In other words, the size of Charge Bearer (chrgBr) in Direct Debit Transaction Information should be zero.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* It is recommended that Charge Bearer be specified as part of Payment Information (PmtInf) and not Direct \n   Debit Transaction Information (DrctDbTxInf). \n   See row 10 of section 2.1.3 of Payment Information pg 9 of SEPA B2B Direct Debit C2B Implementation \n   Guidelines document. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_Charge_Bearer:\nchrgBr->size() = 0\n\nendpackage"
    },
    {
      "name": "epcAosGrpHdr",
      "text": "The requirements are as follows: \n\nIn the package 'isoStdIso20022TechXsdPain00800101', particularly in the context of 'GroupHeader1', there are few constraints that needs to be followed. These fields namely, 'Authstn', 'FwdgAgt', 'InitgPty PstlAdr' and 'InitgPty CtryOfRes' should not be filled if the instructed banks are not in the AOS community as these are only applicable for AOS (Aspect Oriented Software). If these fields are filled, then the non-AOS community banks may reject these messages. Hence, the size of these fields should be zero as defined in the constraint 'EPC_AOS_GrpHdr'. This is in reference to section 1.2 of the SEPA (Single Euro Payments Area) B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The elements Authstn, FwdgAgt, InitgPty PstlAdr and InitgPty CtryOfRes in GrpHdr are AOS only.\n   Instructed banks that are not in the AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext GroupHeader1\ninv EPC_AOS_GrpHdr:\nauthstn->size() = 0 \nand\nfwdgAgt->size() = 0 \nand \ninitgPty.pstlAdr->size() = 0 \nand \ninitgPty.ctryOfRes->size() = 0\n\nendpackage"
    },
    {
      "name": "epcGrpHdrGrpgMIXD",
      "text": "The requirements are as follows: \n\nWithin the context of GroupHeader1 in the package isoStdIso20022TechXsdPain00800101, which is referencing the model pain.008.001.01corrected.xsd, there is an invariant EPC_GrpHdrGrpgMIXD. This invariant requires that the value of 'grpg' must always be set to 'MIXD'. This requirement is based on the fact that according to the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3, 'grpg' can only be set to 'MIXD' within the GroupHeader.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* In the GroupHeader, grouping can only be set to 'MIXD'.\n   Row 7 pg 6 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3. */\n\ncontext GroupHeader1\ninv EPC_GrpHdrGrpgMIXD:\ngrpg='MIXD'\n\nendpackage"
    },
    {
      "name": "epcAosDrctDbtTxInfPmtTpInf",
      "text": "The requirements are as follows: In the context of \"DirectDebitTransactionInformation1\" within the \"isoStdIso20022TechXsdPain00800101\" package, it is stated that the size of 'pmtTpInf' should be 0. This indicates there should not be any payment type information included in a Direct Debit Transaction Information. A warning is also given indicating that the element PmtTpInf in DrctDbtTxInf is for AOS only and any instructed banks that are not in the AOS community may reject messages containing these elements. This follows the section 1.2 of the SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The element PmtTpInf in DrctDbtTxInf is AOS only. Instructed banks that are not in the AOS\n   community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext\tDirectDebitTransactionInformation1\ninv EPC_AOS_DrctDbtTxInfPmtTpInf:\npmtTpInf->size() = 0\n\nendpackage"
    },
    {
      "name": "epcPmtInfId",
      "text": "The requirements are as follows:\n\nIn the context of the class 'PaymentInstructionInformation2' within the 'isoStdIso20022TechXsdPain00800101' package, a rule is specified that the 'Payment Information Identification' or 'pmtInfId' attribute should not be empty. Basically, it is important to include at least one 'pmtInfId' when giving instructions for a payment. This rule has been recommended by the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3 document.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* It is recommended that 'Payment Information Identification' be included (PmtInf PmtInfId).\n   Ref row 2 Section 2.1.3 in SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3 document. */\n\ncontext PaymentInstructionInformation2\ninv EPC_PmtInfId:\npmtInfId->size() > 0\n\nendpackage"
    },
    {
      "name": "epcCdtrAgtFinInstnId",
      "text": "The requirements are as follows:\n\nThe system mandates that for the PaymentInstructionInformation2 context regarding the CreditorAgent (PmtInf cdtrAgt FinInstnId), only the Bank Identifier Codes (BIC) are permitted. This is in line with the SEPA B2B Direct Debit C2B Implementation Guidelines outlined in row 1, page 9.\n\nParticularly, the system checks that the size of the following attributes should be zero i.e., these attributes should not be provided:\n\n1. Clearance system member identification (cdtrAgt.finInstnId.clrSysMmbId)\n2. Name and address (cdtrAgt.finInstnId.nmAndAdr)\n3. Proprietary identification (cdtrAgt.finInstnId.prtryId)\n4. Combined identification (cdtrAgt.finInstnId.cmbndId)\n5. Branch identification (cdtrAgt.brnchId)\n\nSo, according to the code, the system validates that no details other than the BIC are allowed for identifying the CreditorAgent.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* For CreditorAgent (PmtInf cdtrAgt FinInstnId), only BIC is allowed.\n   See row 1 page 9 of SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext PaymentInstructionInformation2\ninv EPC_cdtrAgtFinInstnId:\ncdtrAgt.finInstnId.clrSysMmbId->size() = 0\nand cdtrAgt.finInstnId.nmAndAdr->size() =0\nand cdtrAgt.finInstnId.prtryId->size() = 0\nand cdtrAgt.finInstnId.cmbndId->size() =0\nand cdtrAgt.brnchId->size() = 0\n\nendpackage"
    },
    {
      "name": "epcCdtrAdrLine",
      "text": "The requirement is as follows: In the context of PaymentInstructionInformation2, if there is at least one address line (AdrLine) specified for a creditor (Cdtr), it is restricted that the total number of AdrLine must not exceed two. This is in accordance with the SEPA B2B Direct Debit C2B Implementation Guidelines (refer page 8, row 8).",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Only two occurrences of AdrLine are allowed for a Creditor (PmtInf Cdtr pstlAdr AdrLine).\n   See row 8 on page 8 of SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext PaymentInstructionInformation2\ninv EPC_CdtrAdrLine:\ncdtr.pstlAdr.adrLine->size() >0 implies cdtr.pstlAdr.adrLine->size() <= 2\n\nendpackage"
    },
    {
      "name": "epcRmtInfstrdcdtrRefInfTpCd",
      "text": "The requirement is as follows: In the context of structured remittance information in a model conforming to the path '../../model/pain.008.001.01corrected.xsd' laid out in the schema of the package 'isoStdIso20022TechXsdPain00800101', the specific entity 'CreditorReferenceInformation1' must satisfy the following constraint: The creditor reference type code (located under the path 'RmtInf strd cdtrRefInf cdtrRefTp Cd') should be set to 'SCOR'. This requirement is in line with the rule outlined on page 14, row 13, of the SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* For structured remittance information, the creditor reference type code in creditor reference information \n   (RmtInf strd cdtrRefInf cdtrRefTp Cd) must be 'SCOR'. \n   See row 13 on pg 14 of SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext CreditorReferenceInformation1\ninv EPC_RmtInfstrdcdtrRefInfTpCd:\ncdtrRefTp.cd='SCOR'\n\nendpackage"
    },
    {
      "name": "epcDrctDbtTxInfultmtDbtrIdprvtId",
      "text": "The requirement goes as follows: \n\nIn the context of Direct Debit Transaction Information 1, there could be only one occurrence of private identification for the ultimate debtor of Direct Debit Transaction Information. It should either be undefined or the size of 'private Identification' of 'ultimate debtor' should be less than or equal to one, according to the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3., referring to row 20 on page13.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Only one occurrence of Private Identification for Direct Debit Transaction Information Ultimate Debtor \n   (DrctDbTxInf ultmtDbtr Id prvtId) may be present.\n   Ref row 20 on pg 13 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_drctDbtTxInfultmtDbtrIdprvtId:\nultmtDbtr.oclIsUndefined()\nor\nultmtDbtr.id.prvtId->size() <=1\n\nendpackage"
    },
    {
      "name": "UReal",
      "text": "The requirement is as follows:\n\nWe need to define operations for a type named \"UReal\". This type should have two attributes named 'x' and 'u', both of type Real.\n\nThe operations for this type are as follows:\n\n- A method named 'add' that receives another UReal object as parameter and returns a new UReal object. The values of 'x' and 'u' of the result should be the sum of the respective values of the current object and the parameter.\n\n- A method 'minus' that performs subtraction. The 'x' value of the result should be the difference between the current object's 'x' value and the parameter's 'x' value, and the 'u' value of the result should be the square root of the difference of squares of the corresponding values of 'u'.\n\n- We require a multiplication method 'mult' and a division method 'divideBy'. The division method should verify that the divisor is not zero.\n\n- Several unary methods: 'abs' that returns the absolute value, 'neg' that returns the negation, 'power' that raises the Type to a real power, 'inverse' that returns the multiplicative inverse (but verifies that the object is not zero), 'sqrt' that calculates the square root (the object should not be negative), 'floor' and 'round' methods which calculate the integer floor and rounding values respectively.\n\n- Several comparison methods: 'equals', 'distinct', 'compareTo', 'lessThan', 'lessEq', 'max', 'min'. These methods allow for comparing two 'UReal' objects in various ways.\n\nImplement these operations using the suitable OCL expressions that capture the desired computation.",
      "label": "-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n-- This file provides the OCL specification of the \n-- operations of type \"UReal\", as defined in the paper \n-- \"Expressing Measurement Uncertainty in Software Models\" \n-- by A. Vallecillo, C. Morcillo, P. Orue. In Proc. of QUATIC 2016.\n--\n-- It assumes uncertainties follow normal distributions.\n--\n-- A companion file \"UReal.use\" contains the OCL specifications \n-- defined using SOIL (Simple OCL-like Imperative Language). The advantage\n-- of SOIL specificatios is that they can be executed in USE. For more information \n-- about SOIL see http://www.db.informatik.uni-bremen.de/publications/Buettner_2014_SCPSOIL.pdf\n--\n-- This module assumes operations \"sqrt\" and \"power\" on OCL type Real, \n-- currently not supported because they are not included in the OCL standard.\n--\n-- They have been included in the extensions to USE using its\n-- predefined extensions mechanisms (they need to be placed in the USE \n-- folder \"oclExtensions\")\n-- \n-- AUTHOR:  A. Vallecillo. av@lcc.uma.es\n-- VERSION: 1.0\n-- DATE: 8 Sep 2016\n-- \n-- Thanks to Priscill Orue, Carmen Morcillo and Martin Gogolla for their help,\n-- comments and suggestions on previous versions of this OCL/USE specification\n--\n\n-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n-- assumes operations \"sqrt\" and \"power\" on OCL type Real.\n-- Their expected signature is as follows: \n-- context Real::sqrt():Real\n-- context Real::power(exp:Real):Real\n\n-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n-- Definiton of the UReal class -- USE specific\n-- \n-- class UReal\n-- attributes\n--     x : Real\n--     u : Real\n-- operations\n--     add(r : UReal) : UReal\n--     minus(r : UReal) : UReal\n--     mult(r : UReal) : UReal\n--     divideBy(r : UReal) : UReal\n--     abs() : UReal\n--     neg() : UReal\n--     inverse() : UReal\n--     power (s : Real) : UReal\n--     sqrt() : UReal\n--     lessThan(r : UReal) : Boolean \n--     lessEq(r : UReal) : Boolean \n--     equals(r : UReal) : Boolean \n--     distinct(r : UReal) : Boolean \n--     max(r : UReal) : UReal\n--     min(r : UReal) : UReal\n--     floor() : UReal\n--     round() : UReal\n-- end\n\ncontext UReal::add(r : UReal) : UReal\npost: result.x = self.x + r.x and\n      result.u = (self.u*self.u + r.u*r.u).sqrt()\n\ncontext UReal::minus(r : UReal) : UReal\npost: result.x = self.x - r.x and\n      result.u = (self.u*self.u - r.u*r.u).sqrt()\n\ncontext UReal::mult(r : UReal) : UReal\npost: result.x = (self.x*r.x) and\n      result.u = (r.u*r.u*self.x*self.x + self.u*self.u*r.x*r.x).sqrt()\n\ncontext UReal::divideBy(r : UReal) : UReal\n  pre:  (r.x - r.u).max(0) > (r.x + r.u).min(0) -- not r.equals(0,0)\n  post: result.x = (self.x/r.x + (self.x*r.u*r.u)/(r.x*r.x*r.x)) and\n        result.u = ((self.u*self.u/r.x) + \n                    ((r.u*r.u*self.x*self.x)/(r.x*r.x*r.x*r.x))).sqrt()\n\ncontext UReal::abs() : UReal\n  post: result.x = (self.x).abs() and\n        result.u = self.u\n\ncontext UReal::neg() : UReal\n  post: result.x = -self.x and \n        result.u = self.u\n\ncontext UReal::power(s : Real) : UReal\n  post: result.x = self.x.power(s) + \n                   ((s*(s-1))/2)*self.x.power(s-2)*(self.u*self.u) and\n        result.u = s*self.u*self.x.power(s-1)\n\ncontext UReal::inverse() : UReal\n    pre: (self.x - self.u).max(0) > (self.x + self.u).min(0) --not r.equals(0,0)\n    post: result.x = 1/self.x and result.u = self.u\n\ncontext UReal::sqrt() : UReal\n    pre: (self.x + self.u)>=0.0  -- self>=0\n    post: result = self.power(0.5)\n    \ncontext UReal::floor() :UReal\n  post: result.x = self.x.floor() and\n        result.u = self.u\n\ncontext UReal::round() :UReal\n  post: result.x = self.x.round() and\n        result.u = self.u\n\n-- comparison operations\n\ncontext UReal::equals(r : UReal) : Boolean \n  post: result = (self.x - self.u).max(r.x - r.u) <= \n                 (self.x + self.u).min(r.x + r.u)\n\ncontext UReal::distinct(r : UReal) : Boolean \n  post: result = not self.equals(r)\n\ncontext UReal::compareTo(r : UReal) : Integer\n  post: result = if self.equals(r) then 0\n                 else if self.lessThan(r) then -1 \n                       else 1 \n                      endif \n                 endif\n\ncontext UReal::lessThan(r : UReal) : Boolean \n  post: result = (self.x<r.x) and ((self.x + self.u)<(r.x - r.u))\n \ncontext UReal::lessEq(r : UReal) : Boolean \n  post: result = self.lessThan(r) or self.equals(r)\n\ncontext UReal::max(r :UReal) :UReal\n  post: result = if r.lessThan(self) then self\n                 else r endif\n\ncontext UReal::min(r :UReal) :UReal\n  post: result = if r.lessThan(self) then r\n                 else self endif"
    },
    {
      "name": "epcMndtRltInfAmdmntInd",
      "text": "The requirement as follows: In the context of MandateRelatedInformation1 model under the package isoStdIso20022TechXsdPain00800101, if the 'Amendment Indicator' (amdmntInd) is set to be 'TRUE', it is mandatory to provide 'Amendment Information Details' (amdmntInfDtls). In other words, the size of the Amendment Information Details (amdmntInfDtls) must be greater than zero when the Amendment Indicator (amdmntInd) is TRUE. This is stated according to the directives in row 6 of page 10 of the SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* The Amendment Information Details in Mandate Related Information (mndtRltdInf) for Direct Debit Transactions\n   are mandatory if 'Amendment Indicator' (AmdmntInd) is 'TRUE'. \n   See row 6 of pg 10 of SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext MandateRelatedInformation1\ninv EPC_mndtRltdInf_AmdmntInd:\nself.amdmntInd = true implies self.amdmntInfDtls->size() > 0\n\nendpackage"
    },
    {
      "name": "Atoms-Molecules",
      "text": "The requirements are as follows:\n\n1. All instances of Atom should have a weight greater than 0, which means no Atom should have a non-positive weight.\n\n2. All instances of Atom should have a unique weight. No two Atoms should share the same weight.\n\n3. There should be no instance of Molecule that contains a noble gas particle. All Molecules must be free from noble gas particles.\n\n4. At least one instance of Atom should be a noble gas. This means there must exist an Atom that is a noble gas.",
      "label": "package diagram\n\ncontext Atom inv NonNegativeAtomicWeight: \n  Atom::allInstances()->forAll(self| self.weight > 0)\n\ncontext Atom inv UniqueAtomicWeight:\n  Atom::allInstances()->isUnique(x| x.weight)\n\ncontext Molecule inv InertNobleGases: \n  Molecule::allInstances()->forAll(self| self.particle->select(x| x.nobleGas)->isEmpty() )\n\ncontext Atom inv AtLeastOneNobleGas:\n  Atom::allInstances()->exists(x| x.nobleGas)\n\nendpackage"
    },
    {
      "name": "chargesAccountAgentRule",
      "text": "The requirements are as follows: In the context of the PaymentInstructionInformation2 class within the isoStdIso20022TechXsdPain00800101 package, an invariant rule is established, named 'ChargesAccountAgentRule'. This rule sets up constraints on the ChargesAccountAgent attribute. The implication of the rule states that, if the size of the ChargesAccountAgent equals to one, then certain conditions must be satisfied.\n\nThese conditions involve assessing the correspondence between the ChargesAccountAgent and the CreditorAgent. Specifically, the size of the branch ID of the CreditorAgent should also equal to one. Furthermore, the Clearing System Member Identification, the Combined ID, the Name and Address, the Proprietary ID, and the BIC (Bank Identifier Code) of the Financial Institution Identification under ChargesAccountAgent should all match their corresponding attributes under CreditorAgent.\n\nThe intent of these rules is to ensure that the ChargesAccountAgent and the CreditorAgent originate from the same financial institution and there is not a completely different financial institution involved. These requirements are based on the financial standards document Payments_Standards-Initiation_updated.pdf reference on page 86.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* If ChargesAccountAgent is present, it must contain a branch of the CreditorAgent. It must \n   not contain a completely different financial institution. \n   Ref. p.86 of Payments_Standards-Initiation_updated.pdf. */\n   \ncontext PaymentInstructionInformation2\ninv ChargesAccountAgentRule:\nchrgsAcctAgt->size() = 1 implies cdtrAgt.brnchId->size() = 1 \nand\nchrgsAcctAgt.finInstnId.clrSysMmbId = cdtrAgt.finInstnId.clrSysMmbId \nand\nchrgsAcctAgt.finInstnId.cmbndId = cdtrAgt.finInstnId.cmbndId \nand\nchrgsAcctAgt.finInstnId.nmAndAdr = cdtrAgt.finInstnId.nmAndAdr \nand\nchrgsAcctAgt.finInstnId.prtryId = cdtrAgt.finInstnId.prtryId \nand\nchrgsAcctAgt.finInstnId.bIC = cdtrAgt.finInstnId.bIC\n\nendpackage"
    },
    {
      "name": "epcAosDrctDbtTxInf",
      "text": "The requirements are as follows: In the context of DirectDebitTransactionInformation1, it must be ensured that there are no elements present within the collections 'rgltryRptg', 'tax' and 'rltdRmtInf'. This is highlighted with the stipulation that the size of each of these collections must be zero. This requirement comes with a warning that, for instructed banks not in the AOS community, messages with these elements may be rejected. It should be noted that this requirement refers to the SEPA B2B Direct Debit C2B Implementation Guidelines.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The elements RgltryRptg, Tax and RltdRmtInf in DrctDbtTxInf are AOS only. Instructed banks\n   that are not in the AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext\tDirectDebitTransactionInformation1\ninv EPC_AOS_DrctDbtTxInf:\nrgltryRptg->size() = 0 \nand \ntax->size() = 0 \nand\nrltdRmtInf->size() = 0\n\nendpackage"
    },
    {
      "name": "ultimateDebtorGuideline",
      "text": "The requirements as follows:\n\nIn a Direct Debit Transaction Information context, the final debtor - referred to as UltimateDebtor - may only be present if it is different from the Debtor. This includes the name and various identification factors. Specifically, the name, the Bank Identifier Code (BIC), the IBEI, the BEI, the EANGLN, the USCHU, the DUNS, the Bank Party Id, and the TaxIdNb of the organizational ID, as well as the driver's license number, customer number, social security number, alien registration number, passport number, tax ID number, identity card number, employer ID number, and other ID of the private ID must be distinct from that of the Debtor. Only one instance of these identifiers is allowed in both the Ultimate Debit and Debtor categories. If more than one instance exists, these identifiers must be different between Ultimate Debit and Debit. If there is another ID type under a private ID, it must be different in ID or ID type between the Ultimate Debtor and the Debit.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Guideline: UltimateDebtor may only be present if different from Debtor. Note: Only one occurrence of \n   prvtId is allowed in ultmtDbtr and dbtr.\n   Ref p.94 of Payments_Standards-Initiated_updated.pdf. */\n\ncontext DirectDebitTransactionInformation1\ninv UltimateDebtorGuideline:\t\t\t\n(ultmtDbtr.nm->size() = 1 implies \n                ultmtDbtr.nm <> dbtr.nm) and\n\n((ultmtDbtr.id.orgId.bIC->size() = 1 and dbtr.id.orgId.bIC->size() = 1) implies\n    ultmtDbtr.id.orgId.bIC <> dbtr.id.orgId.bIC) and\n\n((ultmtDbtr.id.orgId.iBEI->size() = 1 and dbtr.id.orgId.iBEI->size() = 1) implies\n    ultmtDbtr.id.orgId.iBEI <> dbtr.id.orgId.iBEI) and\n\n((ultmtDbtr.id.orgId.bEI->size() = 1 and dbtr.id.orgId.bEI->size() = 1) implies\n    ultmtDbtr.id.orgId.bEI <> dbtr.id.orgId.bEI) and \n\n((ultmtDbtr.id.orgId.eANGLN->size() = 1 and dbtr.id.orgId.eANGLN->size() = 1) implies\n    ultmtDbtr.id.orgId.eANGLN <> dbtr.id.orgId.eANGLN) and\n\n((ultmtDbtr.id.orgId.uSCHU->size() = 1 and dbtr.id.orgId.uSCHU->size() = 1) implies\n    ultmtDbtr.id.orgId.uSCHU <> dbtr.id.orgId.uSCHU) and\n\n((ultmtDbtr.id.orgId.dUNS->size() = 1 and dbtr.id.orgId.dUNS->size() = 1) implies\n    ultmtDbtr.id.orgId.dUNS <> dbtr.id.orgId.dUNS) and\n\n((ultmtDbtr.id.orgId.bkPtyId->size() = 1 and dbtr.id.orgId.bkPtyId->size() = 1) implies\n    ultmtDbtr.id.orgId.bkPtyId <> dbtr.id.orgId.bkPtyId) and\n\n((ultmtDbtr.id.orgId.taxIdNb->size() = 1 and dbtr.id.orgId.taxIdNb->size() = 1) implies\n    ultmtDbtr.id.orgId.taxIdNb <> dbtr.id.orgId.taxIdNb) and\n\n((ultmtDbtr.id.orgId.prtryId.id->size() = 1 and dbtr.id.orgId.prtryId.id->size() = 1) implies\n    ultmtDbtr.id.orgId.prtryId.id <> dbtr.id.orgId.prtryId.id) and \n\n((ultmtDbtr.id.prvtId.drvrsLicNb->size() = 1 and dbtr.id.prvtId.drvrsLicNb->size() = 1) implies\n    ultmtDbtr.id.prvtId.drvrsLicNb <> dbtr.id.prvtId.drvrsLicNb) and\n\n((ultmtDbtr.id.prvtId.cstmrNb->size() = 1 and dbtr.id.prvtId.cstmrNb->size() = 1) implies\n    ultmtDbtr.id.prvtId.cstmrNb <> dbtr.id.prvtId.cstmrNb) and\n\n((ultmtDbtr.id.prvtId.sclSctyNb->size() = 1 and dbtr.id.prvtId.sclSctyNb->size() = 1) implies\n    ultmtDbtr.id.prvtId.sclSctyNb <> dbtr.id.prvtId.sclSctyNb) and\n\n((ultmtDbtr.id.prvtId.alnRegnNb->size() = 1 and dbtr.id.prvtId.alnRegnNb->size() = 1) implies\n    ultmtDbtr.id.prvtId.alnRegnNb <> dbtr.id.prvtId.alnRegnNb) and \n\n((ultmtDbtr.id.prvtId.psptNb->size() = 1 and dbtr.id.prvtId.psptNb->size() = 1) implies\n    ultmtDbtr.id.prvtId.psptNb <> dbtr.id.prvtId.psptNb) and \n\n((ultmtDbtr.id.prvtId.taxIdNb->size() = 1 and dbtr.id.prvtId.taxIdNb->size() = 1) implies\n    ultmtDbtr.id.prvtId.taxIdNb <> dbtr.id.prvtId.taxIdNb) and\n\n((ultmtDbtr.id.prvtId.idntyCardNb->size() = 1 and dbtr.id.prvtId.idntyCardNb->size() = 1) implies\n    ultmtDbtr.id.prvtId.idntyCardNb <> dbtr.id.prvtId.idntyCardNb) and\n\n((ultmtDbtr.id.prvtId.mplyrIdNb->size() = 1 and dbtr.id.prvtId.mplyrIdNb->size() = 1) implies\n    ultmtDbtr.id.prvtId.mplyrIdNb <> dbtr.id.prvtId.mplyrIdNb) and \n\n((ultmtDbtr.id.prvtId.othrId->size() = 1 and dbtr.id.prvtId.othrId->size() = 1) implies\n    (ultmtDbtr.id.prvtId.othrId.id <> dbtr.id.prvtId.othrId.id or\n    ultmtDbtr.id.prvtId.othrId.idTp <> dbtr.id.prvtId.othrId.idTp))\n\nendpackage"
    },
    {
      "name": "epcAosUltmtCdtr",
      "text": "The requirements are as follows:\n\nWithin the package isoStdIso20022TechXsdPain00800101, there is a context 'PaymentInstructionInformation2'. An invariant 'EPC_AOS_UltmtCdtr' is defined within this context. This invariant checks whether the 'ultmtCdtr' attribute is undefined or not. If defined, then it checks the size of 'pstlAdr' and 'ctryOfRes' attributes of 'ultmtCdtr'. The size of both these attributes should be 0. In this way, the code ensures that if 'ultmtCdtr' - the ultimate creditor is defined, then it must not have values for postal address ('pstlAdr') or country of residence ('ctryOfRes\").",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The elements PstlAdr and CtryOfRes in PmtInf UltmtCdtr are AOS only. Instructed banks that are not \n   in the AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext PaymentInstructionInformation2\ninv EPC_AOS_UltmtCdtr:\nultmtCdtr.oclIsUndefined() or\n(ultmtCdtr.pstlAdr->size() = 0 and\nultmtCdtr.ctryOfRes->size() = 0)\n\nendpackage"
    },
    {
      "name": "epcPmtInfultmtCtdrIdprvtId",
      "text": "The requirement is as follows: In the context of PaymentInstructionInformation2, according to the SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3 (refer to row 2 on page 7), there is a restriction on the payment information for the Ultimate Creditor (PmtInf ultmtCdtr Id prvtId). Specifically, the private identification (prvtId) of the ultimate creditor (ultmtCdtr) should either be undefined or present no more than once. In others words, there can only be one or no occurrence of private identification for Payment Information Ultimate Creditor.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Only one occurrence of Private Identification for Payment Information Ultimate Creditor (PmtInf ultmtCdtr Id \n   prvtId) may be present.\n   Ref row 2 on pg 7 of SEPA B2B Direct Debit C2B Implementation Guidelines Version 1.3. */\n\ncontext PaymentInstructionInformation2\ninv EPC_PmtInfultmtCdtrIdprvtId:\nultmtCdtr.oclIsUndefined()\nor\nultmtCdtr.id.prvtId->size() <=1\n\nendpackage"
    },
    {
      "name": "epcAosInstrForCdtrAgt",
      "text": "The requirement is as follows:\n\nThis requirement is about a software package named \"isoStdIso20022TechXsdPain00800101\". Within this package, the object DirectDebitTransactionInformation1 has an operation or instruction set for the creditor agent (InstrForCdtrAgt).\n\nThere is an important note that 'InstrForCdtrAgt' in the DirectDebitTransactionInformation1 is only for 'AOS' community, and non-'AOS' community banks who are instructed may reject messages containing these elements. Further specifications are referred to section 1.2 of the SEPA B2B Direct Debit C2B Implementation Guidelines.\n\nThe key operation to note here is 'EPC_AOS_InstrForCdtrAgt': The 'instrForCdtrAgt' should have a size of 0. This essentially means that no instructions should be currently set for the creditor agent.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Warning: The element InstrForCdtrAgt in DrctDbtTxInf is AOS only. Instructed banks that are not in the\n   AOS community may reject messages containing these elements.\n   Ref section 1.2 if the SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext DirectDebitTransactionInformation1\ninv EPC_AOS_InstrForCdtrAgt:\ninstrForCdtrAgt->size() = 0\n\nendpackage"
    },
    {
      "name": "epcCdtrNm",
      "text": "The requirement is as follows: In the context of PaymentInstructionInformation2 in the package isoStdIso20022TechXsdPain00800101, the Creditor Name (represented by the parameter 'cdtr.nm') must not be empty. This is stipulated as a mandatory condition in the SEPA B2B Direct Debit C2B Implementation Guidelines (row 5 on page 8). It is enforced by the OCL constraint 'cdtr.nm->size() > 0', which ensures that the size of the 'cdtr.nm' parameter is greater than zero.",
      "label": "-- @model{../../model/pain.008.001.01corrected.xsd}\npackage isoStdIso20022TechXsdPain00800101\n\n/* Creditor Name (PmtInf cdtr Nm) is mandatory. \n   See row 5 on pg 8 of SEPA B2B Direct Debit C2B Implementation Guidelines. */\n\ncontext PaymentInstructionInformation2\ninv EPC_cdtrNm:\ncdtr.nm->size() > 0\n\nendpackage"
    }
  ]
}